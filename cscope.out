cscope 15 /d/Dev/abc               0000112772
	@D:\Dev\abc\Book.h

4 #¥agm®
⁄˚


5 
	#MAX_TIT_LEN
 200

	)

6 
	#MAX_AUT_LEN
 20

	)

8 
_Book
 
	tBook
;

9 
	s_Book
 {

10 
	mtôÀ
[
MAX_TIT_LEN
];

11 
	mauth‹
[
MAX_AUT_LEN
];

12 
	mnum
;

15 
Book
 *
Book_New
(c⁄° *
tôÀ
,c⁄° *
auth‹
,
num
);

16 
Book_Dñëe
(
Book
* 
book
);

17 
Book_Võw
(
Book
* 
book
);

18 
Book_Com∑ªTôÀ
(
Book
 *
book
,c⁄° *
tôÀ
);

19 
Book_Com∑ªAuth‹
(
Book
 *
book
, c⁄° *
auth‹
);

20 
Book_Com∑ªNum
(
Book
 *
book
,
num
);

	@D:\Dev\abc\List.cpp

1 
	~<°dio.h
>

2 
	~<mÆloc.h
>

4 
	~"Li°.h
"

5 
	~"Utû.h
"

8 
	gLi°
::
	$¥ötLi°
() {

9 
Node
* 
±r
 = 
hód
;

11 
	`¥ötf
("\n[head]=>");

12 
±r
) {

13 
	`¥ötf
("%s[%d]", ((
hód
 !
±r
Ë? "=>" : ""),Öå->
d©a
);

14 
±r
 =Öå->
√xt
;

16 
	`¥ötf
("\n");

17 
	}
}

19 
Node
* 
	gLi°
::
	$begö
(Ë{  
hód
; 
	}
}

20 
Node
* 
	gLi°
::
	$íd
(Ë{  
èû
; 
	}
}

22 
	gLi°
::
	$ö£π
(
d©a
) {

23 
Node
* 
√wNode
 = (Node*)
	`mÆloc
((Node));

24 
	`mmem£t
(
√wNode
, 0, (
Node
));

25 
√wNode
->
d©a
 = data;

27 if(
hód
) {

28 
√wNode
->
√xt
 = 
hód
;

29 
√wNode
->
√xt
->
¥ev
 =ÇewNode;

32 
hód
 = 
√wNode
;

33 if(!
èû
Ëèû = 
√wNode
;

34 
	}
}

36 
	gLi°
::
	$ö£πEnd
(
d©a
) {

37 
Node
* 
√wNode
 = (Node*)
	`mÆloc
((Node));

38 
	`mmem£t
(
√wNode
, 0, (
Node
));

39 
√wNode
->
d©a
 = data;

41 if(
èû
) {

42 
èû
->
√xt
 = 
√wNode
;

43 
√wNode
->
¥ev
 = 
èû
;

45 
èû
 = 
√wNode
;

48 
hód
 = 
√wNode
;

49 
èû
 = 
√wNode
;

51 
	}
}

53 
	gLi°
::
	$ªmove
(* 
d©a
) {

54 if(
hód
) {

55 *
d©a
 = 
hód
->data;

57 
Node
* 
t
 = 
hód
;

59 
hód
 = hód->
√xt
;

61 
t
->
¥ev
 =Å->
√xt
 = 0;

62 
	`‰ì
(
t
);

64 
	}
}

66 
	gLi°
::
	$ªmoveEnd
(* 
d©a
) {

67 if(
èû
) {

68 *
d©a
 = 
èû
->data;

70 
Node
* 
t
 = 
èû
;

71 
èû
 = 
t
->
¥ev
;

72 
t
->
¥ev
->
√xt
 = 0;

74 
	`‰ì
(
t
);

75 
t
 = 0;

77 
	}
}

	@D:\Dev\abc\List.h

1 #¥agm®
⁄˚


3 
	sMyD©a
 {

4 
	md©a
;

7 
	sNode
 {

8 
	md©a
;

9 
Node
 *
	m¥ev
;

10 
Node
 *
	m√xt
;

13 
	sLi°
 {

14 
Node
 *
	mhód
 = 0;

15 
Node
 *
	mèû
 = 0;

16 
Node
 *
	mcuºít
 = 0;

18 
¥ötLi°
();

20 
Node
* 
begö
();

21 
Node
* 
íd
();

23 
ö£π
(
d©a
);

24 
ö£πEnd
(
d©a
);

25 
ªmove
(* 
d©a
);

26 
ªmoveEnd
(* 
d©a
);

	@D:\Dev\abc\MurmurHash2.cpp

15 
	$MurmurHash2
 ( c⁄° * 
key
, 
Àn
, 
£ed
 )

20 c⁄° 
m
 = 0x5bd1e995;

21 c⁄° 
r
 = 24;

25 
h
 = 
£ed
 ^ 
Àn
;

29 c⁄° * 
d©a
 = (c⁄° *)
key
;

32 
Àn
 >= 4)

34 
k
 = *(*)
d©a
;

36 
k
 *
m
;

37 
k
 ^k >> 
r
;

38 
k
 *
m
;

40 
h
 *
m
;

41 
h
 ^
k
;

43 
d©a
 += 4;

44 
Àn
 -= 4;

49 
Àn
)

51 3: 
h
 ^
d©a
[2] << 16;

52 2: 
h
 ^
d©a
[1] << 8;

53 1: 
h
 ^
d©a
[0];

54 
h
 *
m
;

60 
h
 ^= h >> 13;

61 
h
 *
m
;

62 
h
 ^= h >> 15;

64  
h
;

65 
	}
}

	@D:\Dev\abc\MyData.h

1 #¥agm®
⁄˚


2 
	~<°rög
>

4 ˛as†
	cMyD©a
 {

5 
	m¥iv©e
:

6 
no
;

7 
	m°d
::
°rög
 
«me
;

8 
	m°d
::
°rög
 
desc
;

9 
	mpublic
:

10 c⁄° 
gëNo
();

11 c⁄° 
	m°d
::
°rög
 
gëName
();

12 c⁄° 
	m°d
::
°rög
 
gëDesc
();

	@D:\Dev\abc\MyHashMap.hpp

1 #i‚de‡
__MYHASHMAP_H


2 
	#__MYHASHMAP_H


	)

4 
	~<io°ªam
>

5 
	~"Utû.h
"

7 
	gãm∂©e
<
ty≥«me
 
	gK
,Åy≥«mê
	gV
>

8 ˛as†
	cMyHashNode
 {

9 
	mpublic
:

10 
	$MyHashNode
(c⁄° 
K
& 
key
, c⁄° 
V
& 
vÆue
)

11 : 
	`key
(
key
), 
	`vÆue
(
vÆue
), 
	$√xt
(
nuŒ±r
) {}

13 c⁄° 
K
& 
	$gëKey
(Ëc⁄° {  
key
; 
	}
}

14 c⁄° 
	gV
& 
	$gëVÆue
(Ëc⁄° {  
vÆue
; 
	}
}

15 
	$£tVÆue
(
V
 
vÆue
Ë{ 
this
->vÆuêvÆue; 
	}
}

16 
MyHashNode
* 
	$gëNext
(Ëc⁄° {  
√xt
; 
	}
}

17 
	$£tNext
(
MyHashNode
* 
√xt
Ë{ 
this
->√xà√xt; 
	}
}

19 
	g¥iv©e
:

20 c⁄° 
K
 
key
;

21 
V
 
	gvÆue
;

22 
MyHashNode
* 
	g√xt
;

25 
	gãm∂©e
 <
ty≥«me
 
	gK
>

26 
	sMyKeyHash
 {

27 
›î©‹
(Ë(c⁄° 
	mK
& 
	mkey
) const {

28  
	mªöãΩªt_ˇ°
<>(
	mkey
);

32 
	gãm∂©e
<
ty≥«me
 
	gK
,Åy≥«mê
	gV
>

33 
	sMyE¡ryVõwî
 {

34 
›î©‹
()(
FILE
* 
	mÂ
, 
	mMyHashNode
<
	mK
,
	mV
>& 
	mo
) {

35 
Ârötf
(
Â
, "{E¡ry:%p, Key:%p, VÆue;%p}", &
o
, &o.
gëKey
(), &o.
gëVÆue
());

39 
	gãm∂©e
<
ty≥«me
 
	gK
,Åy≥«mê
	gV
,Åy≥«mê
	gMyE¡ryVõwî
 = 
MyE¡ryVõwî
<
K
,V>,Åy≥«mê
	gMyKeyHashFunc
 = 
MyKeyHash
<K>, 
size_t
 
	gTABLE_SIZE
 = 1000>

40 ˛as†
	cMyHashM≠
 {

41 
public
:

42 
	$MyHashM≠
() {

43 
èbÀ
 = 
√w
 
MyHashNode
<
K
,
V
>*[
TABLE_SIZE
];

44 
	`mem£t
(
èbÀ
, 0, (
MyHashNode
<
K
,
V
>*)*
TABLE_SIZE
);

45 
size
 = 0;

46 
ˇ∑côy
 = 
TABLE_SIZE
;

49 ~
	$MyHashM≠
() {

50 
	`˛ór
();

51 
dñëe
[] 
èbÀ
;

52 
èbÀ
 = 
nuŒ±r
;

53 
ˇ∑côy
 = 0;

54 
	}
}

56 
	$˛ór
() {

57 if(
size
<1) ;

58 
i
 = 0; i < 
ˇ∑côy
; ++i) {

59 
MyHashNode
<
K
,
V
>* 
íåy
 = 
èbÀ
[
i
];

60 if(!
íåy
) ;

61 
íåy
) {

62 
MyHashNode
<
K
,
V
>* 
¥ev
 = 
íåy
;

63 
íåy
 =É¡ry->
	`gëNext
();

64 
dñëe
 
¥ev
;

66 
èbÀ
[
i
] = 
nuŒ±r
;

68 
size
 = 0;

69 
	}
}

72 
boﬁ
 
	$gë
(c⁄° 
K
& 
key
, 
V
& 
vÆue
) {

73 if(
size
<1Ë 
Ál£
;

74 
hashVÆue
 = 
	`hashFunc
(
key
);

75 
MyHashNode
<
K
,
V
>* 
íåy
 = 
èbÀ
[
hashVÆue
%
TABLE_SIZE
];

76 
íåy
) {

77 if(
íåy
->
	`gëKey
(Ë=
key
) {

78 
vÆue
 = 
íåy
->
	`gëVÆue
();

79  
åue
;

81 
íåy
 =É¡ry->
	`gëNext
();

83  
Ál£
;

84 
	}
}

86 
	$put
(c⁄° 
K
& 
key
, c⁄° 
V
& 
vÆue
) {

87 
hashVÆue
 = 
	`hashFunc
(
key
);

88 
MyHashNode
<
K
,
V
>* 
¥ev
 = 
nuŒ±r
;

89 
MyHashNode
<
K
,
V
>* 
íåy
 = 
èbÀ
[
hashVÆue
%
TABLE_SIZE
];

91 
íåy
 &&É¡ry->
	`gëKey
(Ë!
key
) {

92 
¥ev
 = 
íåy
;

93 
íåy
íåy->
	`gëNext
();

96 if(!
íåy
) {

97 
íåy
 = 
√w
 
MyHashNode
<
K
,
V
>(
key
, 
vÆue
);

98 if(
nuŒ±r
 =
¥ev
) {

99 
èbÀ
[
hashVÆue
%
TABLE_SIZE
] = 
íåy
;

102 
¥ev
->
	`£tNext
(
íåy
);

105 
size
++;

108 
íåy
->
	`£tVÆue
(
vÆue
);

110 
	}
}

112 
	$ªmove
(c⁄° 
K
& 
key
) {

113 
hashVÆue
 = 
	`hashFunc
(
key
);

114 
MyHashNode
<
K
,
V
>* 
¥ev
 = 
nuŒ±r
;

115 
MyHashNode
<
K
,
V
>* 
íåy
 = 
èbÀ
[
hashVÆue
%
TABLE_SIZE
];

117 
íåy
 &&É¡ry->
	`gëKey
(Ë!
key
) {

118 
¥ev
 = 
íåy
;

119 
íåy
 =É¡ry->
	`gëNext
();

122 if(!
íåy
) {

127 if(
nuŒ±r
 =
¥ev
) {

128 
èbÀ
[
hashVÆue
%
TABLE_SIZE
] = 
íåy
->
	`gëNext
();

131 
¥ev
->
	`£tNext
(
íåy
->
	`gëNext
());

134 
size
--;

135 
	}
}

137 
	$¥öt
(
FILE
* 
Â
) {

138 
˙t
 = 0;

139 
	`Ârötf
(
Â
, "{");

140 
	`Ârötf
(
Â
, "\n\tsize=%d\n\t, c≠acôy=%d", 
size
, 
ˇ∑côy
);

141 
	`Ârötf
(
Â
, "\n\t,Éntry=[");

142 
i
 = 0; i < 
TABLE_SIZE
; ++i) {

143 
MyHashNode
<
K
,
V
>* 
íåy
 = 
èbÀ
[
i
];

145 if(!
íåy
) ;

147 
	`Ârötf
(
Â
,

149 (
˙t
>0?", ":""),

150 
i
);

152 
íåy
) {

153 
	`võwî
(
Â
, *
íåy
);

154 if(
íåy
->
	`gëNext
()Ë
	`Ârötf
(
Â
, ", ");

155 
íåy
 =É¡ry->
	`gëNext
();

157 
	`Ârötf
(
Â
, "]");

159 
˙t
++;

162 i‡(
˙t
>0Ë
	`Ârötf
(
Â
, "\n\t\t]"); fprintf(fp, "]");

163 
	`Ârötf
(
Â
, "\n}\n");

164 
	}
}

166 
	g¥iv©e
:

167 
MyHashNode
<
K
,
	gV
>** 
	gèbÀ
;

168 
MyE¡ryVõwî
 
	gvõwî
;

169 
MyKeyHashFunc
 
	ghashFunc
;

170 
size_t
 
	gsize
;

171 
size_t
 
	gˇ∑côy
;

174 
	sMyCh¨sKeyHash
 {

175 
›î©‹
()(c⁄° * 
	m°r
) const {

176 
	mh
 = 5731;

177 * 
	mp
 = (*)
°r
;

178 *
	mp
) {

179 
	mh
 = (
h
<<5&h);

180 
	mh
*=*
p
;

181 
	mp
++;

183  
	mh
;

	@D:\Dev\abc\ThreadPool.cpp

1 
	~<chr⁄o
>

2 
	~<c⁄dôi⁄_v¨übÀ
>

3 
	~<c°dio
>

4 
	~<fun˘i⁄Æ
>

5 
	~<futuª
>

6 
	~<muãx
>

7 
	~<queue
>

8 
	~<thªad
>

9 
	~<ve˘‹
>

11 
«me•a˚
 
	gThªadPoﬁ
 {

12 ˛as†
	cThªadPoﬁ
 {

13 
	gpublic
:

14 
ThªadPoﬁ
(
size_t
 
num_thªads
);

15 ~
ThªadPoﬁ
();

18 
	gãm∂©e
 <
˛ass
 
	gF
, 
	g˛ass
... 
	gArgs
>

19 
	g°d
::
futuª
<
ty≥«me
 
°d
::
ªsu…_of
<
F
(
Args
...)>::
ty≥
> 
EnqueueJob
(

20 
F
&& 
f
, 
Args
&&... 
¨gs
);

22 
	g¥iv©e
:

24 
size_t
 
num_thªads_
;

26 
	g°d
::
ve˘‹
<
°d
::
thªad
> 
w‹kî_thªads_
;

28 
	g°d
::
queue
<
°d
::
fun˘i⁄
<()>> 
jobs_
;

30 
	g°d
::
c⁄dôi⁄_v¨übÀ
 
cv_job_q_
;

31 
	g°d
::
muãx
 
m_job_q_
;

34 
boﬁ
 
	g°›_Æl
;

37 
W‹kîThªad
();

40 
	gThªadPoﬁ
::
	$ThªadPoﬁ
(
size_t
 
num_thªads
)

41 : 
	`num_thªads_
(
num_thªads
), 
	$°›_Æl
(
Ál£
) {

42 
w‹kî_thªads_
.
	`ª£rve
(
num_thªads_
);

43 
size_t
 
i
 = 0; i < 
num_thªads_
; ++i) {

44 
w‹kî_thªads_
.
	`em∂a˚_back
([
this
](Ë{Åhis->
	`W‹kîThªad
(); });

46 
	}
}

48 
	gThªadPoﬁ
::
	$W‹kîThªad
() {

49 
åue
) {

50 
°d
::
unique_lock
<°d::
muãx
> 
	`lock
(
m_job_q_
);

51 
cv_job_q_
.
	`waô
(
lock
, [
this
](Ë{  !this->
jobs_
.
	`em±y
(Ë|| 
°›_Æl
; });

52 i‡(
°›_Æl
 && 
this
->
jobs_
.
	`em±y
()) {

57 
°d
::
fun˘i⁄
<()> 
job
 = std::
	`move
(
jobs_
.
	`‰⁄t
());

58 
jobs_
.
	`p›
();

59 
lock
.
	`u∆ock
();

62 
	`job
();

64 
	}
}

66 
	gThªadPoﬁ
::~
	$ThªadPoﬁ
() {

67 
°›_Æl
 = 
åue
;

68 
cv_job_q_
.
	`nŸify_Æl
();

70 auto& 
t
 : 
w‹kî_thªads_
) {

71 
t
.
	`joö
();

73 
	}
}

75 
	gãm∂©e
 <
˛ass
 
	gF
, 
	g˛ass
... 
	gArgs
>

76 
	g°d
::
futuª
<
ty≥«me
 
°d
::
ªsu…_of
<
F
(
Args
...)>::
ty≥
> 
ThªadPoﬁ
::
	$EnqueueJob
(

77 
F
&& 
f
, 
Args
&&... 
¨gs
) {

78 i‡(
°›_Æl
) {

79 
throw
 
°d
::
	`ru¡ime_îr‹
("ThreadPool ÏÇ¨Ïö© Ï§ëÏßÄÎê®");

82 
usög
 
ªtu∫_ty≥
 = 
ty≥«me
 
°d
::
ªsu…_of
<
	`F
(
Args
...)>::
ty≥
;

83 autÿ
job
 = 
°d
::
make_sh¨ed
<°d::
∑ckaged_èsk
<
	`ªtu∫_ty≥
()>>(

84 
°d
::
	`böd
(°d::
f‹w¨d
<
F
>(
f
), std::f‹w¨d<
Args
>(
¨gs
)...));

85 
°d
::
futuª
<
ªtu∫_ty≥
> 
job_ªsu…_futuª
 = 
job
->
	`gë_futuª
();

87 
°d
::
lock_gu¨d
<°d::
muãx
> 
	`lock
(
m_job_q_
);

88 
jobs_
.
	`push
([
job
]() { (*job)(); });

90 
cv_job_q_
.
	`nŸify_⁄e
();

92  
job_ªsu…_futuª
;

93 
	}
}

98 
	$w‹k
(
t
, 
id
) {

99 
	`¥ötf
("%d sèπ \n", 
id
);

100 
°d
::
this_thªad
::
	`¶ìp_f‹
(°d::
chr⁄o
::
	`£c⁄ds
(
t
));

101 
	`¥ötf
("%dÉndá·î %ds\n", 
id
, 
t
);

102  
t
 + 
id
;

103 
	}
}

105 
	$maö
() {

106 
ThªadPoﬁ
::ThªadPoﬁ 
	`poﬁ
(3);

108 
°d
::
ve˘‹
<°d::
futuª
<>> 
futuªs
;

109 
i
 = 0; i < 10; i++) {

110 
futuªs
.
	`em∂a˚_back
(
poﬁ
.
	`EnqueueJob
(
w‹k
, 
i
 % 3 + 1, i));

112 auto& 
f
 : 
futuªs
) {

113 
	`¥ötf
("ªsu… : %d \n", 
f
.
	`gë
());

115 
	}
}

	@D:\Dev\abc\Util.cpp

1 
	~"Utû.h
"

3 
	$°rhash
(c⁄° * 
°r
, 
mod
) {

4 
h
 = 5731;

5 
c
;

6 * 
ss
 = (*)
°r
;

7 (
c
 = *
ss
++)) {

8 
h
+=((h<<5Ë+ hË+ 
c
;

9 if(
mod
>0)
h
%=mod;

11  
h
;

12 
	}
}

14 
uöt32_t
 
	$hash
(*
buf
, 
size_t
 
Àn
, 
uöt32_t
* 
hvÆ
) {

15 
uöt32_t
 
PRIME_32
 = 0x01000193;

16 * 
bp
 = (*)
buf
;

17 * 
be
 = 
bp
+
Àn
;

19 
bp
<
be
) {

20 #i‡
	`deföed
(
HAHS_SIMPLE
) || 1

21 *
hvÆ
 *
PRIME_32
;

23 *
hvÆ
 += (*hval<<1)+(*hval<<4)+(*hval<<7)+(*hval<<8)+(*hval<<24);

25 *
hvÆ
 ^*
bp
++;

27  *
hvÆ
;

28 
	}
}

30 
	$hash
(c⁄° * 
key
) {

31 c⁄° *
p
;

32 
vÆ
 = 5371;

33 
p
 =(*)
key
;

34 *
p
!='\0') {

35 
tmp
;

36 
vÆ
 = ((vÆ<<5Ë* vÆ)+(*
p
);

42  
vÆ
;

43 
	}
}

44 
	$hash_void
(c⁄° *
key
) {

45 c⁄° *
p
;

46 
vÆ
;

47 
vÆ
 = 0x01000193;

49 
p
 =(*)
key
;

50 *
p
!='\0') {

51 
tmp
;

52 
vÆ
 = (vÆ<<4)+(*
p
);

53 if((
tmp
=(
vÆ
 & 0xf0000000))) {

54 
vÆ
 = vÆ ^ (
tmp
>>24);

55 
vÆ
 = vÆ ^ 
tmp
;

57 
p
++;

59  
vÆ
 % 0xffffffff;

60 
	}
}

63 * 
	$mem£t
(* 
p
, 
v
, 
size_t
 
Àn
) {

64 * 
µ
 = (*)
p
;

65 
Àn
--Ë{ *
µ
++ = 
v
; }

66  
p
;

67 
	}
}

69 
	$¥ime_max
(
n
) {

76 
boﬁ
 
¥ime
[
n
 + 1];

77 
	`mem£t
(
¥ime
, 
åue
, (prime));

79 
p
 = 2;Ö *Ö <
n
;Ö++)

83 i‡(
¥ime
[
p
] =
åue
)

91 
i
 = 
p
 *Ö; i <
n
; i +pË
¥ime
[i] = 
Ál£
;

96 
≤
;

97 
p
 = 2;Ö <
n
;Ö++Ë{ i‡(
¥ime
[p]Ë
≤
 =Ö; }

98  
≤
;

99 
	}
}

101 
	$°∫cmp
(c⁄° * 
a
, c⁄° * 
b
, 
size_t
 
Àn
) {

102 
Àn
-->0) {

103 if(*
a
!=*
b
)  (*a>*b? 1 : -1);

104 
a
++;

105 
b
++;

108 
	}
}

110 
	$°rcmp
(c⁄° * 
a
, c⁄° * 
b
) {

111  
	`°∫cmp
(
a
, 
b
, 
	`°æí
(a));

112 
	}
}

114 * 
	$°∫˝y
(* 
d°
, c⁄° * 
§c
, 
size_t
 
Àn
) {

115 * 
dp
 = 
d°
;

116 * 
•
 = (*)
§c
;

117 
Àn
-->0Ë*
d°
++ = *
•
++;

118  
dp
;

119 
	}
}

122 
size_t
 
	$°æí
(c⁄° * 
p
) {

123 
size_t
 
l
 = 0;

124 * 
µ
 = (*)
p
;

125 *
µ
++Ë{ 
l
++; }

126  
l
;

127 
	}
}

129 * 
	$°r°r
(c⁄° * 
°r1
, c⁄° * 
°r2
) {

130 *
˝
 = (*)
°r1
;

131 *
s1
, *
s2
;

132 i‡–!*
°r2
 )

133 ((*)
°r1
);

135 *
˝
)

137 
s1
 = 
˝
;

138 
s2
 = (*Ë
°r2
;

139  *
s2
 && !(*
s1
 - *s2) )

140 
s1
++, 
s2
++;

141 i‡(!*
s2
)

142 (
˝
);

143 
˝
++;

146 (
NULL
);

147 
	}
}

150 
size_t
 
	$°∫˝y
(* 
p
, c⁄° * 
s
, 
size_t
 
s_Àn
) {

151 
size_t
 
Œ
 = 
s_Àn
;

152 
Œ
-->0Ë{ *(
p
+Œ-1Ë*(
s
+ll-1); }

153  
s_Àn
;

154 
	}
}

157 #ifde‡
__˝lus˝lus


	@D:\Dev\abc\Util.h

1 #¥agm®
⁄˚


3 
	~<°dio.h
>

4 
	~<°döt.h
>

5 
	~<mÆloc.h
>

7 #ifde‡
__˝lu•lus


11 
uöt32_t
 
hash
(* 
buf
, 
size_t
 
Àn
, uint32_t* hash);

12 
hash_void
(c⁄° *
key
);

13 
¥ime_max
(
n
);

15 * 
mem£t
(* 
p
, 
c
, 
size_t
 
Àn
);

17 
size_t
 
°æí
(c⁄° * 
p
);

18 * 
°∫˝y
(* 
p
, c⁄° * 
s
, 
size_t
 
s_Àn
);

19 
°rhash
(c⁄° * 
°r
, 
mod
);

20 
°∫cmp
(c⁄° * 
a
, c⁄° * 
b
, 
size_t
 
Àn
);

21 
°rcmp
(c⁄° * 
a
, c⁄° * 
b
);

22 * 
°r°r
(c⁄° * 
°r1
, c⁄° * 
°r2
);

25 #ifde‡
__˝lu•lus


	@D:\Dev\abc\a.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<mÆloc.h
>

6 
	$maö
(
¨gc
, * 
¨gv
[]) {

7 
a
,
b
;

8 if(
¨gc
<2)  0;

9 
a
 = 
	`©oi
(
¨gv
[1]);

10 
b
 = 
	`©oi
(
¨gv
[2]);

13 
	`¥ötf
("%d^%d=%d\n", 
a
,
b
,a^b);

14 
	}
}

18 
	mno
;

19 
	m«me
[32];

20 } 
	tBook
;

22 
sw≠n
(* 
a
, * 
b
, 
size_t
 
Àn
);

23 
sw≠bn
(* 
a
, * 
b
, * 
buf
, 
size_t
 
Àn
);

25 
	$maö
(
¨gc
,* 
¨gv
[]) {

27 
size_t
 
¨r_Àn
 = 10;

28 
Book
** 
¨r
 = (Book**)
	`mÆloc
((Book*)*
¨r_Àn
);

30 
size_t
 
i
 = 0;i<
¨r_Àn
;i++) {

31 *(
¨r
+
i
Ë(
Book
*)
	`mÆloc
((Book));

32 
	`mem£t
(*(
¨r
+
i
), 0, (
Book
));

37 
¨r
[0]->
no
 = 1;

38 
	`°r˝y
(
¨r
[0]->
«me
, "name 1");

40 
¨r
[1]->
no
 = 2;

41 
	`°r˝y
(
¨r
[1]->
«me
, "name 2");

42 
Book
 
bb
;

44 
	`sw≠bn
(
¨r
[0],áº[1], &
bb
, (
Book
));

46 
size_t
 
i
 = 0; i < 
¨r_Àn
; i++) {

47 
	`¥ötf
("[%d] :Ço=%d,Çame=%s\n", 
i
, 
¨r
[i]->
no
,áº[i]->
«me
);

50 
size_t
 
i
 = 0; i < 
¨r_Àn
; i++) {

51 
	`‰ì
(*(
¨r
+
i
));

53 
	`‰ì
(
¨r
);

56 
	}
}

58 
	$sw≠n
(* 
a
, * 
b
, 
size_t
 
Àn
) {

59 * 
Ø
 = (*)
a
;

60 * 
bb
 = (*)
b
;

61 * 
â
 = (*)
	`mÆloc
(
Àn
);

62  
	`sw≠bn
(
a
,
b
,
â
,
Àn
);

63 
	}
}

65 
	$sw≠bn
(* 
a
, * 
b
, * 
buf
, 
size_t
 
Àn
) {

66 * 
Ø
 = (*)
a
;

67 * 
bb
 = (*)
b
;

68 if(!
buf
)  0;

69 * 
â
 = (*)
buf
;

70 
i
 = 0;i<
Àn
;i++Ë*(
â
+i)=*(
Ø
+i);

71 
i
 = 0;i<
Àn
;i++Ë*(
Ø
+i)=*(
bb
+i);

72 
i
 = 0;i<
Àn
;i++Ë*(
bb
+i)=*(
â
+i);

74 
	}
}

	@D:\Dev\abc\a.cpp

1 
	~<io°ªam
>

2 
	~<°dio.h
>

4 
	~"Utû.h
"

5 
	~"hash_m≠.hµ
"

6 
	~"¨øy.hµ
"

9 
	tmuöt
;

11 
	sUI¡Hashî
 {

12 
›î©‹
()(c⁄° 
	mmuöt
& 
	mkey
) const {

13  
	mkey
;

17 
	sUI¡SåVõwî
 {

18 
›î©‹
()(c⁄° 
	mmuöt
& 
	mkey
, * 
	mvÆue
) const {

19 
¥ötf
("{%d, %s}", 
key
, 
vÆue
);

23 
	sUI¡M©chî
 {

24 
boﬁ
 
›î©‹
()(c⁄° 
	mmuöt
& 
	ma
, c⁄° muöt& 
	mb
) const {

25  
	ma
 =
b
;

29 
do_ã°_¨øy
();

31 
	$maö
(
¨gc
, * 
¨gv
[]) {

32 
tc
 = 0;

34 
	`¥ötf
("#%d : I≈ut\n", ++
tc
);

35 
i
 = 1; i< 
¨gc
; i++) {

36 
	`¥ötf
("%d : hash(%s)=%zu\n", 
i
, 
¨gv
[i], 
	`°rhash
(argv[i], 1024*1024*1024));

39 
HashM≠
<
muöt
, *, 
UI¡SåVõwî
, 
UI¡Hashî
, 
UI¡M©chî
> *
m≠


40 
√w
 
HashM≠
<
muöt
, *, 
UI¡SåVõwî
, 
UI¡Hashî
, 
UI¡M©chî
>;

42 
	`¥ötf
("#%d : Put\n", ++
tc
);

43 
i
 = 1; i< 
¨gc
; i++) {

44 
	`¥ötf
("%d : hash(%s)=%zu\n", 
i
, 
¨gv
[i], 
	`°rhash
(argv[i], 1024*1024*1024));

45 
m≠
->
	`put
(
	`°rhash
(
¨gv
[
i
], 1024*1024*1024),árgv[i]);

48 
	`¥ötf
("#%d : Pröt\n", ++
tc
);

49 
m≠
->
	`¥öt
();

51 
	`¥ötf
("#%d : Remove\n", ++
tc
);

52 
i
 = 1; i< 
¨gc
; i++) {

53 
m≠
->
	`ªmove
(
	`°rhash
(
¨gv
[
i
], 1024*1024*1024));

56 
	`dñëe
(
m≠
);

59 
	`do_ã°_¨øy
();

62 
	}
}

64 
	$do_ã°_¨øy
() {

66 
¨r
[3] = {1, 2,100};

68 
Aºay
<, 3> 
	`¨r2
(
¨r
);

70 
¨r2
.
	`¥öt
();

72 
	}
}

	@D:\Dev\abc\a1.cpp

1 
	~<io°ªam
>

2 
	~<c°rög
>

3 
	~<°rög
>

4 
	~<øndom
>

5 
	~<˘ime
>

6 
	~<sys/time.h
>

7 #i‡
deföed
(
WIN32
Ë|| deföed(
_WIN64
)

8 
	~<Wödows.h
>

10 
	~<sys/time.h
>

12 
	~"a1.hµ
"

14 
usög
 
«me•a˚
 
	g°d
;

16 
	gãm∂©e
<
ty≥«me
 
	gT
>

17 
ölöe
 
	$sw≠
(
T
 &
a
, T &
b
Ë{ T 
tmp
 =á;á = b; b =Åmp; 
	}
}

19 
sw≠b
(* 
a
, * 
b
, * 
buf
, 
size_t
 
Àn
);

20 
	gtime°amp_buf
[25];

21 c⁄° * 
time°amp
(* 
buf
 = 
time°amp_buf
);

22 
comp_öt
(* 
a
, * 
b
);

23 
hóp_push
(* 
¨r
, 
pos
, (*
comp
)(*
a
, *
b
), * (*
buf„r
)(), 
	`size_t
 (*
buf„æí
)());

24 
	`hóp_p›
(* 
¨r
, 
n
, 
pos
, (*
comp
)(*
a
, *
b
), * (*
buf„r
)(), 
	`size_t
 (*
buf„æí
)());

25 
	`¥öt
(
¨r
[], 
¨r_Àn
);

26 c⁄° * 
	`time°amp
(* 
buf
);

27 
ib
;

28 * 
	$gëbuf„r
(Ë{  &
ib
; 
	}
}

29 
size_t
 
	$gëbuf„æí
(Ë{  (); 
	}
}

31 
	$maö
(
¨gc
, * 
¨gv
[]) {

33 
	`Ârötf
(
°dout
, "%†%†i†°¨ãd.\n", 
	`time°amp
(), 
¨gv
[0]);

34 
¨r_Àn
 = 10;

35 
vîbo£
 = 0;

36 
i
 = 1;i<
¨gc
;i++) {

37 if((!
	`°rcmp
("-n", 
¨gv
[
i
]Ë|| !°rcmp("--num",árgv[i])Ë&& i+1<
¨gc
) {

38 
¨r_Àn
 = 
	`©oi
(
¨gv
[
i
+1]); i++;

40 if(!
	`°rcmp
("-v", 
¨gv
[
i
]) || !strcmp("--verbose",árgv[i])) {

41 
vîbo£
 = 1;

45 if(
¨r_Àn
 <=0) {

46 
¨r_Àn
 = 10;

47 
	`¥ötf
("%†Aºay Sizê(DeÁu…:%dË", 
	`time°amp
(), 
¨r_Àn
); 
	`fÊush
(
°dout
);

50 
	`Ârötf
(
°dout
, "%†mÆloc(%dËi†d⁄e.\n", 
	`time°amp
(), 
¨r_Àn
+1);

51 * 
¨r
 = (*)
	`mÆloc
(()*(
¨r_Àn
+1));

52 if(!
¨r
Ë{ 
	`Ârötf
(
°dîr
, "%†ÁûÅÿmÆloc(%d)", 
	`time°amp
(), 
¨r_Àn
);  
EXIT_FAILURE
;}

54 
	`§™d
(()
	`time
(
NULL
));

56 
	`Ârötf
(
°dout
, "%†§™d—ime(NULL)Ëi†d⁄e.\n", 
	`time°amp
());

57 
i
 = 1;ò<
¨r_Àn
;i++Ë{ 
¨r
[i] = 
	`ønd
(); 
	`hóp_push
◊º, i, 
comp_öt
, 
gëbuf„r
, 
gëbuf„æí
); }

59 
	`Ârötf
(
°dout
, "%†¨∏ønd(Ë&& hóp_push(%dËi†d⁄e.\n", 
	`time°amp
(), 
¨r_Àn
+1);

60 if(
vîbo£
Ë{
	`¥öt
(
¨r
, 
¨r_Àn
); 
	`Ârötf
(
°dout
, "\n"); }

61 
i
 = 
¨r_Àn
;i>1;i--) {

62 
	`sw≠b
((**)&
¨r
+1, (**)&¨r+
i
, &
ib
, ());

63 
	`hóp_p›
(
¨r
, 
i
-1, 1, 
comp_öt
, 
gëbuf„r
, 
gëbuf„æí
);

66 
	`Ârötf
(
°dout
, "%†sw≠ & hóp_p›(%dËi†d⁄e.\n", 
	`time°amp
(), 
¨r_Àn
+1);

67 if(
vîbo£
Ë{
	`¥öt
(
¨r
, 
¨r_Àn
); 
	`Ârötf
(
°dout
, "\n"); }

69 
	`‰ì
(
¨r
);

71 
cout
 << "Good " << 
ídl
;

74 
	}
}

77 
hóp_push
(* 
¨r
, 
pos
, (*
comp
)(* 
a
, * 
b
), * (*
buf„r
)(), 
	$size_t
 (*
buf„æí
)()) {

78 if(
pos
<=1||
	`comp
((*)
¨r
+pos/2, (*)arr+pos)>0) ;

79 
	`sw≠b
(&
¨r
+
pos
/2, &¨r+pos, 
	`buf„r
(), 
	`buf„æí
());

80 
	`hóp_push
(
¨r
, 
pos
/2, 
comp
, 
buf„r
, 
buf„æí
);

81 
	}
}

83 
hóp_p›
(* 
¨r
, 
n
, 
pos
, (*
comp
)(* 
a
, * 
b
),* (*
buf„r
)(), 
	$size_t
 (*
buf„æí
)() ) {

84 
≈
 = 
pos
*2;

85 if(
≈
<
n
&&
	`comp
((*)
¨r
+np,(*)arr+np+1)<0)Çp++;

86 if(
≈
>
n
||
	`comp
((*)
¨r
+
pos
,(*)arr+np)<=0) ;

87 
	`sw≠b
(&
¨r
+
pos
, &¨r+
≈
, 
	`buf„r
(), 
	`buf„æí
());

88 
	`hóp_p›
(
¨r
, 
n
, 
≈
, 
comp
, 
buf„r
, 
buf„æí
);

89 
	}
}

91 
	$¥öt
(
¨r
[], 
¨r_Àn
) {

92 
	`Ârötf
(
°dout
, "%†Aºay : [", 
	`time°amp
());

93 
i
 = 1;i<=
¨r_Àn
;i++Ë{ 
	`¥ötf
("%d ", 
¨r
[i]); }

94 
	`Ârötf
(
°dout
, "]\n");

95 
	}
}

97 c⁄° * 
	$time°amp
(* 
buf
) {

98 
time_t
 
øwTime
;

99 
tm
* 
pTimeInfo
;

101 
øwTime
 = 
	`time
(
NULL
);

102 
pTimeInfo
 = 
	`loˇ…ime
(&
øwTime
);

104 
timevÆ
 
curTime
;

105 
	`gëtimeofday
(&
curTime
, 
NULL
);

106 
mûli
 = 
curTime
.
tv_u£c
 / 1000;

108 
	`mem£t
(
buf
, 0, 25);

110 
	`°r·ime
(
buf
, 20, "%Y-%m-%d %H:%M:%S", 
pTimeInfo
);

112 
	`•rötf
(
buf
+19, ".%03d", 
mûli
);

114  
buf
;

115 
	}
}

117 
	$comp_öt
(* 
a
, * 
b
) {

118  *(*)
a
 - *(*)
b
;

119 
	}
}

121 
	$sw≠b
(* 
a
, * 
b
, * 
t
, 
size_t
 
Àn
) {

122 if(!
t
)  1;

123 
	`mem˝y
(
t
, 
a
, 
Àn
);

124 
	`mem˝y
(
a
, 
b
, 
Àn
);

125 
	`mem˝y
(
b
, 
t
, 
Àn
);

127 
	}
}

	@D:\Dev\abc\a1.hpp

1 #¥agm®
⁄˚


3 
	~<°rög
>

4 
	~<io°ªam
>

14 
	m«me
[512];

15 
	mdesc
[512];

16 
	m£Œ˙t
;

17 
	mno
;

18 }
	tBook
;

20 
f1
(
a
, 
b
);

	@D:\Dev\abc\a2.cpp

2 
	~<Æg‹ôhm
>

3 
	~<io°ªam
>

4 
	~"Utû.h
"

6 
	~<øndom
>

7 
	~<˘ime
>

8 
	~<sys/time.h
>

9 #i‡
deföed
(
WIN32
Ë|| deföed(
_WIN64
)

10 
	~<Wödows.h
>

12 
	~<sys/time.h
>

14 
	~"a1.hµ
"

16 
usög
 
«me•a˚
 
	g°d
;

18 
	#sw≠
(
a
,
b
Ë{ 
t
 = (a); (aË(b); (bËt; }

	)

20 c⁄° * 
time°amp
();

22 
	$hóp_push
(
¨r
[], 
pos
) {

23 if(
pos
<=1||
¨r
[pos/2]>arr[pos]) ;

24 
	`sw≠
(
¨r
[
pos
/2],árr[pos]);

25 
	`hóp_push
(
¨r
, 
pos
/2);

26 
	}
}

28 
	$hóp_p›
(
¨r
[], 
n
, 
pos
) {

29 
≈
 = 
pos
*2;

30 if(
≈
<
n
&&
¨r
[np]<arr[np+1])Çp++;

31 if(
≈
>
n
||
¨r
[
pos
]>arr[np]) ;

32 
	`sw≠
(
¨r
[
pos
],áº[
≈
]);

33 
	`hóp_p›
(
¨r
, 
n
, 
≈
);

34 
	}
}

36 c⁄° * 
	$time°amp
() {

37 
time_t
 
øwtime
;

38 
tm
* 
ti
;

40 
øwtime
 = 
	`time
(
NULL
);

41 
ti
 = 
	`loˇ…ime
(&
øwtime
);

43 
timevÆ
 
cuπime
;

44 
	`gëtimeofday
(&
cuπime
, 
NULL
);

45 
mûli

cuπime
.
tv_u£c
 / 1000;

47 
tm°mp_buf
[25];

48 
	`mem£t
(
tm°mp_buf
, 0, 25);

49 
	`°r·ime
(
tm°mp_buf
, 20, "%Y-%m-%d %H:%M:%S", 
ti
);

51 
	`•rötf
(
tm°mp_buf
+19, ".%03d", 
mûli
);

52  
tm°mp_buf
;

53 
	}
}

55 
usög
 
«me•a˚
 
	g°d
;

57 
«me•a˚
 
	gns_gg
 {

58 
	sA°
 {

59 
	gødius
 = 12;

61 
bœ°
(
A°
* 
a°
, 
f‹˚
);

64 
	sT¨gë
 {

65 
	mns_gg
::
A°
* 
a°
;

66 
T¨gë
(
ns_gg
::
A°
* 
a°
) :ást{ast} {}

67 
›î©‹
 
ns_gg
::
A°
*(Ëc⁄° {  
a°
; }

70 
boﬁ
 
bœ°
(
T¨gë
 
èrgë
);

71 
	gãm∂©e
<
ty≥«me
 
	gT
> 
bœ°
(
T
* 
o
, 
f‹˚
);

73 
	$∂ay
(
ns_gg
::
A°
* 
a°
) {

74 
	`bœ°
(
a°
,100);

75 
	}
}

77 
«me•a˚
 
	gns_gg
 {

78 
bœ°
(
ns_gg
::
A°
* 
a°
, 
f
) {

79 
¥ötf
("ns::gg blast\n");

83 
	sAA
{

86 
	mm1
:2;

87 
	mm2
:4;

88 
	mm3
:2;

90 
	mm
;

95 
	m˙t
;

96 
	m«me
[32];

97 } 
	tBB
;

100 
	$maö
(
¨gc
, * 
¨gv
[]) {

103 
size_t
 
b_Àn
 = 10;

104 
BB
* 
b
 = (BB*)
	`mÆloc
((BB)* 
b_Àn
);

106 
	`mem£t
((*)
b
, '\0', (
BB
)*
b_Àn
);

108 
i_buf
[32];

110 
	`mem£t
(
i_buf
, '\0', 32);

111 
idx
 = 0; idx < 
b_Àn
; ++idx) {

112 * 
≤
 = 
b
[
idx
].
«me
;

113 
	`°∫˝y
(
≤
, "name", ("name"));

114 
	`ôﬂ
(
idx
, 
≤
+
	`°æí
(pn), 10);

115 
b
[
idx
].
˙t
 = idx;

118 
idx
 = 0; idx < 
b_Àn
; ++idx) {

119 
	`¥ötf
("[%d] %d, %s\n", 
idx
, 
b
[idx].
˙t
, b[idx].
«me
);

125 
ns_gg
::
A°
* 
a°
 = 
√w
Çs_gg::
	`A°
();

126 
	`∂ay
(
a°
);

130 
AA
 
Ø
{};

131 
Ø
.
m
 = (0x01)|(0x02<<2)|(0x03<<6);

132 
cout
 << "size:" << (
AA
Ë<< 
ídl
;

133 
cout
 << ()
Ø
.
m1
<<","<<(Ôa.
m2
<<","<<(Ôa.
m3
<<
ídl
;

135 * 
°r
 = (*)
	`mÆloc
(()*1024);

136 
	`mmem£t
(
°r
, 0, 1024);

137 
	`¥ötf
("E¡î:"); 
	`fÊush
(
°dout
);

138 
	`sˇnf
("%s", 
°r
); 
	`fÊush
(
°dö
);

139 
	`¥ötf
("mhash(%s)=%d\n", 
°r
, 
	`mhash
(str));

143 
	}
}

145 
	$hash
(c⁄° * 
°r
) {

147 
h
;

148 
h
 = 5381;

149 * 
s
 = (*)
°r
;

150 *
s
++Ë{ 
h
=((h<<5)+h)+s[0]; h%= 1024; }

151  
h
;

152 
	}
}

	@D:\Dev\abc\a3.cpp

1 
	~<io°ªam
>

3 
	~<ve˘‹
>

4 
	~<Æg‹ôhm
>

6 
usög
 
«me•a˚
 
	g°d
;

8 autÿ
föd_missög_ñemít
(c⁄° 
°d
::
ve˘‹
<
uöt64_t
>& 
v
) {

9 c⁄°áutÿ
ô
 = 
°d
::
adja˚¡_föd
(°d::
cbegö
(
v
), std::
˚nd
(v),

10 []◊utÿ
x
,áutÿ
y
) {  y-x>1; });

11  *
	gô
+1;

14 
	spi
 {

15 
c⁄°ex¥
 
	mvÆue
 = 3.14;

18 
	gãm∂©e
 <c⁄° & 
	gr
>

19 
	scú˛e_¨ó
{

20 
c⁄°ex¥
 
	mvÆue
 = 
r
*r*
pi
::
vÆue
;

24 
	sødius
 {

25 
c⁄°ex¥
 
	mvÆue
 = 2.5;

28 
	$maö
() {

29 
ve˘‹
<
uöt64_t
> 
a
={1,2,4};

31 
cout
<< 
	`föd_missög_ñemít
(
a
Ë<< 
ídl
;

33 
c⁄°ex¥
 
ªsu…
 = 
cú˛e_¨ó
<
ødius
::
vÆue
>::value;

34 
	`°©ic_as£π
(
ªsu…
==19.625, "notÉqual");

35 
°d
::
cout
 << 
ªsu…
 << std::
ídl
;

37 
	}
}

	@D:\Dev\abc\a4.cpp

4 
	~<io°ªam
>

5 
	~<ve˘‹
>

6 
	~<li°
>

7 
	~<Æg‹ôhm
>

8 
	~<¨øy
>

13 
	gãm∂©e
 <
ty≥«me
 
	gT
>

14 ˛as†
	cDummyVe˘‹


16 
	mpublic
:

19 
DummyVe˘‹
();

21 
ex∂icô
 
DummyVe˘‹
(
size_t
 
size
);

22 
ex∂icô
 
DummyVe˘‹
(
°d
::
öôülizî_li°
<
T
> 
l°
);

25 
˛ass
 
	mIãøt‹
;

26 
Iãøt‹
 
begö
();

27 
Iãøt‹
 
íd
();

29 
	m¥iv©e
:

31 
size_t
 
mSize
;

32 
T
* 
	mmBuf„r
;

39 
	gãm∂©e
 <
ty≥«me
 
	gT
>

40 
	gDummyVe˘‹
<
	gT
>::
	$DummyVe˘‹
(Ë: 
mSize
{0
	}
}, 
	gmBuf„r
{
	gnuŒ±r
}

44 
	gãm∂©e
 <
ty≥«me
 
	gT
>

45 
	gDummyVe˘‹
<
	gT
>::
	$DummyVe˘‹
(
size_t
 
size
Ë: 
mSize
{
	}
size}, 
	gmBuf„r
{
√w
 
	gT
[size]}

47 
	gi
 = 0; i < 
	gmSize
; i ++)

49 
	gmBuf„r
[
i
] = 0;

53 
	gãm∂©e
 <
ty≥«me
 
	gT
>

54 
	gDummyVe˘‹
<
	gT
>::
DummyVe˘‹
(
°d
::
öôülizî_li°
<
T
> 
l°
Ë: 
mSize
{l°.
size
()}, 
	gmBuf„r
{
√w
 T[lst.size()]}

56 
	g°d
::
c›y
(
l°
.
begö
(),Ü°.
íd
(), 
this
->
mBuf„r
);

60 
	gãm∂©e
 <
ty≥«me
 
	gT
>

61 
˛ass
 
	gDummyVe˘‹
<
	gT
>::
Iãøt‹


63 
public
:

65 
Iãøt‹
(
T
* 
±r
);

67 
	gIãøt‹
& 
	g›î©‹
++();

68 
	gIãøt‹
& 
	g›î©‹
--();

69 
	gIãøt‹
& 
	g›î©‹
++();

70 
	gIãøt‹
& 
	g›î©‹
--();

71 
	gT
& 
	g›î©‹
*();

72 
boﬁ
 
	g›î©‹
==(c⁄° 
Iãøt‹
& 
ôî
);

73 
boﬁ
 
	g›î©‹
!=(c⁄° 
Iãøt‹
& 
ôî
);

74 
	g¥iv©e
:

75 
T
* 
mPå
;

78 
	gãm∂©e
 <
ty≥«me
 
	gT
>

79 
	gDummyVe˘‹
<
	gT
>::
Iãøt‹
::
	$Iãøt‹
(
T
* 
±r
Ë: 
mPå
{
	}
ptr}

85 
ãm∂©e
 <
ty≥«me
 
T
>

86 
ty≥«me
 
DummyVe˘‹
<
T
>::
Iãøt‹
& DummyVe˘‹<T>::Iãøt‹::
›î©‹
++()

88 
this
->
mPå
 ++;

89  *
	gthis
;

92 
	gãm∂©e
 <
ty≥«me
 
	gT
>

93 
ty≥«me
 
	gDummyVe˘‹
<
	gT
>::
Iãøt‹
& 
DummyVe˘‹
<
T
>::Iãøt‹::
›î©‹
--()

95 
this
->
mPå
 --;

96  *
	gthis
;

100 
	gãm∂©e
 <
ty≥«me
 
	gT
>

101 
ty≥«me
 
	gDummyVe˘‹
<
	gT
>::
Iãøt‹
& 
DummyVe˘‹
<
T
>::Iãøt‹::
›î©‹
++()

103 
this
->
mPå
 ++;

104  *
	gthis
;

107 
	gãm∂©e
 <
ty≥«me
 
	gT
>

108 
ty≥«me
 
	gDummyVe˘‹
<
	gT
>::
Iãøt‹
& 
DummyVe˘‹
<
T
>::Iãøt‹::
›î©‹
--()

110 
this
->
mPå
 --;

111  *
	gthis
;

114 
	gãm∂©e
 <
ty≥«me
 
	gT
>

115 
	gT
& 
	gDummyVe˘‹
<T>::
Iãøt‹
::
›î©‹
*()

117  *
this
->
mPå
;

120 
	gãm∂©e
 <
ty≥«me
 
	gT
>

121 
boﬁ
 
	gDummyVe˘‹
<
	gT
>::
Iãøt‹
::
›î©‹
==(c⁄° Iãøt‹& 
ôî
)

123  
this
->
mPå
 =
ôî
.mPtr;

126 
	gãm∂©e
 <
ty≥«me
 
	gT
>

127 
boﬁ
 
	gDummyVe˘‹
<
	gT
>::
Iãøt‹
::
›î©‹
!=(c⁄° Iãøt‹& 
ôî
)

129  
this
->
mPå
 !
ôî
.mPtr;

132 
	gãm∂©e
 <
ty≥«me
 
	gT
>

133 
ty≥«me
 
	gDummyVe˘‹
<
	gT
>::
Iãøt‹
 
DummyVe˘‹
<
T
>::
	$begö
()

135  
DummyVe˘‹
<
T
>::
Iãøt‹
{
this
->
mBuf„r
};

136 
	}
}

138 
	gãm∂©e
 <
ty≥«me
 
	gT
>

139 
ty≥«me
 
	gDummyVe˘‹
<
	gT
>::
Iãøt‹
 
DummyVe˘‹
<
T
>::
	$íd
()

141  
DummyVe˘‹
<
T
>::
Iãøt‹
{
this
->
mBuf„r
 +Åhis->
mSize
};

142 
	}
}

145 
	gãm∂©e
 <
ty≥«me
 
	gIãr
>

146 
Iãr
 
	$maximum
(
Iãr
 
fú°
, Iã∏
œ°
)

148 
Iãr
 
max
 = 
fú°
;

149 
Iãr
 
ôî
 = 
fú°
; iã∏!
œ°
; iter ++)

151 i‡(*
max
 < *
ôî
)

153 
max
 = 
ôî
;

156  
max
;

157 
	}
}

159 
	$maö
()

162 
°d
::
li°
<> 
l°
{1,2,3,4,5};

163 
°d
::
¨øy
<, 5> 
¨r
{1,2,3,4,5};

164 
°d
::
ve˘‹
<> 
vec
{1,2,3,4,5};

166 
DummyVe˘‹
<> 
dummyVec
{1,2,3,4,5};

168 autÿ
l°MaxIãr
 = 
	`maximum
(
l°
.
	`begö
(),Ü°.
	`íd
());

169 
°d
::
cout
 << *
l°MaxIãr
 << std::
ídl
;

170 autÿ
¨rMaxIãr
 = 
	`maximum
(
¨r
.
	`begö
(),áº.
	`íd
());

171 
°d
::
cout
 << *
¨rMaxIãr
 << std::
ídl
;

172 autÿ
vecMaxIãr
 = 
	`maximum
(
vec
.
	`begö
(), vec.
	`íd
());

173 
°d
::
cout
 << *
vecMaxIãr
 << std::
ídl
;

174 autÿ
dummyVecMaxIãr
 = 
	`maximum
(
dummyVec
.
	`begö
(), dummyVec.
	`íd
());

175 
°d
::
cout
 << *
dummyVecMaxIãr
 << std::
ídl
;

177 
l°MaxIãr
 = 
°d
::
	`max_ñemít
(
l°
.
	`begö
(),Ü°.
	`íd
());

178 
°d
::
cout
 << *
l°MaxIãr
 << std::
ídl
;

179 
¨rMaxIãr
 = 
°d
::
	`max_ñemít
(
¨r
.
	`begö
(),áº.
	`íd
());

180 
°d
::
cout
 << *
¨rMaxIãr
 << std::
ídl
;

181 
vecMaxIãr
 = 
°d
::
	`max_ñemít
(
vec
.
	`begö
(), vec.
	`íd
());

182 
°d
::
cout
 << *
vecMaxIãr
 << std::
ídl
;

183 
dummyVecMaxIãr
 = 
°d
::
	`max_ñemít
(
dummyVec
.
	`begö
(), dummyVec.
	`íd
());

184 
°d
::
cout
 << *
dummyVecMaxIãr
 << std::
ídl
;

185 
	}
}

	@D:\Dev\abc\a_hash.cpp

1 
	~<°dio.h
>

2 
	~<mÆloc.h
>

4 
	#MAX_TABLE_SIZE
 10000000

	)

6 
	s_Node
 {

7 
	mkey
[512];

8 
_Node
* 
	m√xt
;

9 } 
	tNode
;

12 
	s_Dic
 {

13 
_Node
* 
	mhód
;

14 }
	tDic
;

17 
Dic
 
	gdi˘
[
MAX_TABLE_SIZE
];

19 
	gN
,
	gM
,
	gªsu…
 = 0;

20 
	gw‹d
[512];

22 
	$hashög
(* 
w‹d
) {

23 
hash
 = 5031, 
idx
 = 0;

24 
w‹d
[
idx
] != '\0') {

25 
hash
 = (((hash<<5Ë+ hashË* ()
w‹d
[
idx
])%
MAX_TABLE_SIZE
;

26 
idx
++;

28 if(
hash
<0Ë (hash%
MAX_TABLE_SIZE
)*-1;

29  
hash
%
MAX_TABLE_SIZE
;

30 
	}
}

33 
Node
* 
	$√wNode
() {

34 
Node
* 
node
 = (Node*)
	`mÆloc
((Node));

35 
node
->
√xt
 = 
NULL
;

36  
node
;

37 
	}
}

39 
size_t
 
	$°æí
(c⁄° * 
w‹d
) {

40 
size_t
 
Àn
 = 0;

41 * 
˝
 = (*)
w‹d
;

42 *
˝
++ !'\0'Ë
Àn
++;

43  
Àn
;

44 
	}
}

47 
	$°r˝y
(* 
d°
, c⁄° * 
§c
, 
size_t
 
Àn
) {

48 
idx
 = 0;

49 
idx
<
Àn
) {

50 *(
d°
+
idx
Ë*(
§c
+idx);

51 
idx
++;

53 *(
d°
+
idx
)='\0';

54 
	}
}

56 
	$°rcmp
(c⁄° * 
a
, c⁄° * 
b
) {

57 * 
Ø
 = (*)
a
;

58 * 
bb
 = (*)
b
;

60 if(*
Ø
!=*
bb
)  *aa > *bb ? 1 : -1;

61 if(*
Ø
 == '\0') ;

62 
Ø
++, 
bb
++;

65 
	}
}

67 
	$ö£πNode
(* 
w‹d
) {

68 
hash
 = 
	`hashög
(
w‹d
);

69 
Node
* 
tmp
 = 
	`√wNode
();

70 
	`°r˝y
(
tmp
->
key
, 
w‹d
, 
	`°æí
(word));

71 if(!
di˘
[
hash
].
hód
Ëdi˘[hash].hód = 
tmp
;

73 
Node
* 
cur
 = 
di˘
[
hash
].
hód
;

74 
cur
->
√xt
) cur = cur->next;

75 
cur
->
√xt
=
tmp
;

77 
	}
}

79 
	$födNode
(* 
w‹d
, 
Node
** 
node
) {

80 
hash
 = 
	`hashög
(
w‹d
);

81 *
node
 = 
nuŒ±r
;

82 
Node
* 
cur
 = 
di˘
[
hash
].
hód
;

83 if(!
cur
)  0;

85 
cur
) {

86 if(!
	`°rcmp
(
cur
->
key
, 
w‹d
)Ë{ *
node
 = cur;  1; }

87 
cur
 = cur->
√xt
;

91 
	}
}

93 
	$maö
(
¨gc
, * 
¨gv
[]) {

95 
	`sˇnf
("%d %d", &
N
, &
M
);

96 
i
 = 0; i < 
N
; ++i) {

97 
	`sˇnf
("%s", 
w‹d
);

98 
	`ö£πNode
(
w‹d
);

101 
Node
** 
node
;

102 
i
 = 0; i < 
M
; ++i) {

103 
	`sˇnf
("%s", 
w‹d
);

104 if(
	`födNode
(
w‹d
, 
node
)Ë
ªsu…
++;

106 
	`¥ötf
("%d", 
ªsu…
);

109 
	}
}

	@D:\Dev\abc\aa.cpp

1 
	~<°dio.h
>

2 
	~<mÆloc.h
>

3 
	~<ty≥_åaôs
>

5 
	~"MyHashM≠.hµ
"

9 
	$mem£t
(* 
p
, 
c
, 
size_t
 
Àn
) {

10 * 
µ
 = (*)
p
;

11 
Àn
--) {

12 *
µ
++ = 
c
;

15 
	}
}

17 
	$°rcmp
(c⁄° * 
a
, c⁄° * 
b
) {

18 * 
Ø
 = (*)
a
;

19 * 
bb
 = (*)
b
;

20 *
Ø
) {

21 if(*
Ø
 !*
bb
) ;

22 
Ø
++;

23 
bb
++;

25  *(*)
Ø
 - *(*)
bb
;

26 
	}
}

28 
	$°∫˝y
(* 
d°
, c⁄° * 
§c
, 
size_t
 
Àn
) {

29 if(!
d°
)  -1;

30 * 
•
 = (*)
§c
;

31 
Àn
-->0Ë*
d°
++ = *
•
++;

33 
	}
}

35 
size_t
 
	$°æí
(c⁄° * 
°r
) {

36 
size_t
 
Àn
 = 0;

37 * 
c
 = (*)
°r
;

38 *
c
++Ë
Àn
++;

39  
Àn
;

40 
	}
}

44 
	sMyCh¨sI¡Võwî
 {

45 
›î©‹
()(c⁄° *
	mkey
, 
	mvÆue
) const {

46 
¥ötf
("(%s, %d)", 
key
, 
vÆue
);

50 
	sMyCh¨sM©chî
 {

51 
›î©‹
()(c⁄° * 
	m°r1
, c⁄° * 
	m°r2
) const {

52  
°rcmp
(
°r1
, 
°r2
);

56 
	$¥ötUßge
() {

57 
	`¥ötf
("Usage : cmd [ key value]\n");

58 
	`¥ötf
(" --exit, --quit\n");

59 
	`¥ötf
(" --add(-a) key value\n");

60 
	`¥ötf
(" --remove(-r) key\n");

61 
	`¥ötf
(" --get(-g) key\n");

62 
	`¥ötf
(" --print(-p)\n");

63 
	`¥ötf
(" --clearall(-ca)\n");

64 
	}
}

66 ˛as†
	cMSåög
 {

67 
	mpublic
:

68 
ex∂icô
 
	$MSåög
(
size_t
 
ˇ∑côy
 = 8193)

69 : 
	`°r
(
nuŒ±r
), 
	`Àn
(0), 
	$ˇ∑côy
(
ˇ∑côy
) {

72 
ex∂icô
 
	$MSåög
(c⁄° * 
°r
) {

73 
Àn
 = 
	`°æí
(
°r
);

74 
ˇ∑côy
 = 
Àn
+1;

75 
this
->
°r
 = 
√w
 [
ˇ∑côy
];

76 
	`mem£t
(
this
->
°r
, '\0', 
ˇ∑côy
);

77 
	`°∫˝y
(
this
->
°r
, så, 
Àn
);

78 
	}
}

81 
	$MSåög
(c⁄° 
MSåög
& 
o
) {

82 
	`˛⁄e
(
o
);

83 
	}
}

86 c⁄° 
	gMSåög
& 
	g›î©‹
=(c⁄° 
MSåög
& 
o
) {

87 if(
this
 =&
o
)  o;

88 
di•o£
();

89 
˛⁄e
(
o
);

90  *
	gthis
;

94 
	$MSåög
(
MSåög
&& 
o
) {

95 
	`move
(
°d
::
f‹w¨d
<
MSåög
&&>(
o
));

96 
	}
}

98 c⁄° 
	gMSåög
& 
	g›î©‹
=(
MSåög
&& 
o
) {

99 if(
this
==&
o
)  o;

100 
di•o£
();

101 
move
(
°d
::
f‹w¨d
<
MSåög
&&>(
o
));

102  *
	gthis
;

105 
	$di•o£
() {

106 if(!
°r
) ;

107 
dñëe
[] 
°r
;

108 
°r
 = 
nuŒ±r
;

109 
Àn
 = 
ˇ∑côy
 = 0;

110 
	}
}

112 
	$˛⁄e
(c⁄° 
MSåög
& 
o
) {

113 
Àn
 = 
	`°æí
(
o
.
°r
);

114 
ˇ∑côy
 = 
Àn
+1;

115 
°r
 = 
√w
 [
ˇ∑côy
];

116 
	`°∫˝y
(
°r
, 
o
.°r, 
Àn
);

117 
°r
[
Àn
] = '\0';

118 
	}
}

120 
	$move
(
MSåög
&& 
o
) {

121 
°r
 = 
°d
::
	`move
(
o
.str);

122 
Àn
 = 
o
.len;

123 
ˇ∑côy
 = 
o
.capacity;

125 
o
.
°r
 = 
nuŒ±r
;

126 
o
.
Àn
 = o.
ˇ∑côy
 = 0;

127 
	}
}

129 
boﬁ
 
	g›î©‹
==(c⁄° 
MSåög
& 
o
) const {

130  !
°rcmp
(
°r
, 
o
.str);

133 
boﬁ
 
	g›î©‹
!=(c⁄° 
MSåög
& 
o
) const {

134  
°rcmp
(
°r
, 
o
.str);

137 
‰õnd
 
	g°d
::
o°ªam
& 
›î©‹
<<(
°d
::o°ªam& 
os
, c⁄° 
	gMSåög
& 
	go
) {

138 
	gos
 << "{Àn=" <<
	go
.
	gÀn
 << ", c≠acôy="<<o.
	gˇ∑côy
<<", så="<<o.
	g°r
 << "}";

139  
	gos
;

142 
‰õnd
 
	g°d
::
i°ªam
& 
›î©‹
>>(
°d
::i°ªam& 
is
, 
	gMSåög
& 
	go
) {

143 
mem£t
(
o
.
°r
, '\0', o.
ˇ∑côy
);

144 
	gis
 >> 
	go
.
	g°r
;

145 
	go
.
	gÀn
 = 
°æí
(
o
.
°r
);

148 if(!
	go
.
	g°r
) {

149 
	go
.
	gÀn
 = 0;

150 
	go
.
	gˇ∑côy
 = 8193;

151 
	go
.
	g°r
 = 
√w
 [
o
.
ˇ∑côy
];

152 
mem£t
(
o
.
°r
, '\0', o.
ˇ∑côy
);

155 
	go
.
	gÀn
 = 0;

156 
mem£t
(
o
.
°r
, '\0', 
°æí
(o.str));

160 
size_t
 
	gbuf_Àn
 = 256;

161 
	gbuf
[
buf_Àn
];

162 
mem£t
(
buf
, '\0', 
buf_Àn
);

165 
size_t
 
	gi
 = 0;

166 
	gis
.
gë
(
buf
, 
buf_Àn
)) {

167 if(
	gi
>=
o
.
ˇ∑côy
) {

168 
o
.
ˇ∑côy
 *= 2;

169 
	go
.
	g°r
 = (*)
ªÆloc
(
o
.
°r
, o.
ˇ∑côy
);

171 
°∫˝y
(
o
.
°r
+
i
, 
buf
, 
buf_Àn
);

172 
	go
.
	gÀn
 +
buf_Àn
;

173 
	gi
+=
buf_Àn
;

175 
	go
.
	g°r
[
i
] = '\0';

176 
	go
.
	gÀn
 = 
i
;

178  
	gis
;

181 c⁄° * 
	$gëSå
(Ëc⁄° {  
°r
; 
	}
}

183 
	g¥iv©e
:

184 * 
°r
;

185 
size_t
 
	gÀn
;

186 
size_t
 
	gˇ∑côy
;

189 
	sMSåögHash
 {

190 
›î©‹
(Ë(c⁄° 
	mMSåög
& 
	mo
) const {

191  
°rhash
(
o
.
gëSå
(), 1024*1024*1024);

195 
	sMSåögVõwî
 {

196 
›î©‹
()(
FILE
* 
	mÂ
, c⁄° 
	mMyHashNode
<
	mMSåög
, MSåög>& 
	mo
) const {

197 
Ârötf
(
Â
, "{Key:%s, VÆue:%s}", 
o
.
gëKey
().
gëSå
(), o.
gëVÆue
().getStr());

201 
	gãm∂©e
<
ty≥«me
 
	gt
, 
size_t
 
	gn
>

202 
ölöe
 
¨øy_c›y
(
t
 (&
d°
)[
n
],Å (&
§c
)[n]) {

203 
°©ic_as£π
(
°d
::
is_åivüŒy_c›y_assig«bÀ
<
t
>::
vÆue
, "elementÅype hasÇon-trivial copyássignment");

204 
mem˝y
(
d°
, 
§c
, 
n
*(
t
));

206 
size_t
 
	gi
 = 0; i < 
	gn
; ++i) {

207 
	gd°
[
i
] = 
§c
[i];

212 
do_ã°_t2
();

214 
boﬁ
 
	gg_run
;

216 
	$maö
() {

217 
usög
 
«me•a˚
 
°d
;

219 
MyHashM≠
<
MSåög
, MSåög, 
MSåögVõwî
, 
MSåögHash
, 1000> 
m≠
;

221 
size_t
 
cmd_Àn
 = 1024+1, 
key_Àn
 = 1024+1, 
vÆue_Àn
 = 1024+1, 
exec_˙t
 = 0;

222 
cmd
[
cmd_Àn
];

223 
g_run
 = 
åue
;

224 
g_run
) {

225 
	`mem£t
(
cmd
, '\0', 
cmd_Àn
);

226 
cout
 << "[" << ++
exec_˙t
 << "] E¡î (--add key vÆue, --gë key, --ªmovêkey, --¥öt, --˛ór, --exôË: "; cout.
	`Êush
();

227 
cö
>>
cmd
;

228 if(!
	`°rcmp
(
cmd
, "--add") || !strcmp(cmd, "-a")) {

229 
key
[
key_Àn
], 
vÆue
[
vÆue_Àn
];

230 
	`mem£t
(
key
, '\0', 
key_Àn
);

231 
	`mem£t
(
vÆue
, '\0', 
vÆue_Àn
);

232 
cö
 >> 
key
 >> 
vÆue
;

233 
MSåög
 
	`mk
(
key
), 
	`mv
(
vÆue
);

234 
m≠
.
	`put
(
mk
, 
mv
);

236 if(!
	`°rcmp
(
cmd
, "--get") || !strcmp(cmd, "-g")) {

237 
key
[
key_Àn
];

238 
	`mem£t
(
key
, '\0', 
key_Àn
);

239 
cö
 >> 
key
;

240 
MSåög
 
	`ms
(
key
);

241 
MSåög
 
mm
;

242 if(
m≠
.
	`gë
(
ms
, 
mm
)) {

243 
cout
 << "Found : key="<< 
ms
 << ", vÆue=" << 
mm
 << 
°d
::
ídl
;

246 
cout
 << "NŸ found : " << 
key
 << 
°d
::
ídl
;

249 if(!
	`°rcmp
(
cmd
, "--remove") || !strcmp(cmd, "-r")) {

250 
key
[
key_Àn
];

251 
	`mem£t
(
key
, '\0', 
key_Àn
);

252 
cö
 >> 
key
;

253 
MSåög
 
	`ms
(
key
);

254 
m≠
.
	`ªmove
(
ms
);

256 if(!
	`°rcmp
(
cmd
, "--print") || !strcmp(cmd, "-p")) {

257 
m≠
.
	`¥öt
(
°dout
);

259 if(!
	`°rcmp
(
cmd
, "--clear") || !strcmp(cmd, "-c")) {

260 
m≠
.
	`˛ór
();

262 if(!
	`°rcmp
(
cmd
, "--exit") || !strcmp(cmd, "-e") || !strcmp(cmd, "-q")) {

263 
g_run
 = 
Ál£
;

265 if(!
	`°rcmp
(
cmd
, "--t2") || !strcmp(cmd, "-t2")) {

266 
	`do_ã°_t2
();

269 
cout
 << "Unsuµ‹ãd Cmd : " << 
cmd
 << 
°d
::
ídl
;

273 
n
;

274 
	`¥ötf
("numbî : "); 
	`fÊush
(
°dout
);

275 
	`sˇnf
("%d", &
n
); 
	`fÊush
(
°dö
);

276 
	`¥ötf
("¥ime_max(%dË: %d\n", 
n
, 
	`¥ime_max
(n));

280 
HashM≠
<c⁄° *, , 
MyCh¨sHash
> 
m≠
;

281 
m≠
.
	`put
("1", 1);

282 
iv
;

283 
boﬁ
 
b
 = 
m≠
.
	`gë
("1", 
iv
);

284 
°d
::
cout
<< "m≠.gë("<< "1" << "Ë" << (
b
 ? "åue" : "Ál£"Ë<< ", vÆuê" << 
iv
 << std::
ídl
;

288 
	}
}

290 
	$do_ã°_t2
() {

291 
a
[3] = {1,2,3}, 
b
[3]={0};

293 
¨øy_c›y
<, 3>(
b
, 
a
);

295 
i
 = 0; i < 3; ++i) {

296 
	`¥ötf
("[%d]=%d\t", 
i
, 
b
[i]);

298 
	`¥ötf
("\n");

300 
	}
}

	@D:\Dev\abc\aaa.cpp

2 
	~"Øa.h
"

4 c⁄° 
	g°d
::
°rög
 
AAA
::
	$gëName
() {

5  
«me
;

6 
	}
}

8 c⁄° 
	gAAA
::
	$gëVÆue
() {

9  
vÆue
;

10 
	}
}

	@D:\Dev\abc\ab.cpp

1 
	~<io°ªam
>

2 
	~<ˇs£π
>

3 
	~<°rög
>

4 
	~<mem‹y
>

6 
	#mas£π
(
ex¥essi⁄
, 
mesßge
Ë
	`as£π
(”x¥essi⁄Ë&& mesßge)

	)

8 ˛as†
	cPDesc
 {

9 
	mpublic
:

10 
	$PDesc
(c⁄° * 
«me
, c⁄° * 
desc
) {

11 
	`mas£π
(
«me
 !
NULL
 , "Name mustÖrovied");

12 
«me_
 = 
°d
::
make_unique
<°d::
°rög
>(
«me
);

14 
	`mas£π
(
desc
 !
NULL
, "Name mustÖrovied");

15 
desc_
 = 
°d
::
make_unique
<°d::
°rög
>(
desc
);

18 c⁄° * 
	$gëName
(Ëc⁄° {  
«me_
.
	`gë
()->
	`c_°r
(); 
	}
}

19 c⁄° * 
	$gëDesc
(Ëc⁄° {  
desc_
.
	`gë
()->
	`c_°r
(); 
	}
}

21 
	g¥iv©e
:

22 
°d
::
unique_±r
<°d::
°rög
> 
«me_
;

23 
	g°d
::
unique_±r
<
°d
::
°rög
> 
desc_
;

26 
	$maö
() {

27 
PDesc
 
	`pd
(
NULL
, "a");

29 
	}
};

	@D:\Dev\abc\array.hpp

1 
	~<io°ªam
>

3 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gN
>

4 ˛as†
	cAºay
 {

5 
T
 
	md©a
[
N
];

7 
	mpublic
:

8 
Aºay
(
T
 (&
¨r
)[
N
]) {

9 
i
 = 0;
	mi
<
	mN
;++i) {

10 
	md©a
[
i
] = 
¨r
[i];

14 
T
* 
	$gëAºay
(Ë{  
d©a
; 
	}
}

16 
	$size
(Ë{  
N
; 
	}
}

18 
	$¥öt
() {

19 
i
 = 0;ò< 
N
;++i) {

20 
°d
::
cout
 << 
d©a
[
i
] << ", ";

22 
°d
::
cout
 << std::
ídl
;

23 
	}
}

	@D:\Dev\abc\at.cpp

1 
	~<io°ªam
>

3 
	gãm∂©e
<
ty≥«me
 
	gK
,Åy≥«mê
	gV
>

4 ˛as†
	cNode
{

5 
	mpublic
:

7 
	$Node
(
K
 
k
, 
V
 
v
Ë: 
	`key
(k), 
	$vÆue
(
v
) {}

10 
	$Node
(c⁄° 
Node
& 
o
Ë: 
	`key
(o.
key
), 
	`vÆue
(o.
vÆue
), 
	$√xt
(
o
.
√xt
Ë{
	}
}

11 
Node
 
	g›î©‹
=(c⁄° Node& 
o
Ë{ Node::
key
 = o.key; 
	gNode
::
vÆue
 = o.value; }

13 
	$Node
(
Node
&& 
o
Ë: 
	`key
(
°d
::
	`move
(o.
key
)), 
	`vÆue
(°d::move(o.
vÆue
)), 
	`√xt
(°d::
	$move
(
o
.
√xt
)Ë{
	}
}

14 
Node
 
›î©‹
=(Node&& 
o
Ë{ Node::
key
 = 
°d
::
move
(o.key); 
	gNode
::
vÆue
 = std::move(o.vÆue); Node::
√xt
 = std::move(o.next); }

16 
K
 
	$gëKey
(Ëc⁄° {  
Node
::
key
; 
	}
}

17 
	$£tVÆue
(
V
 
vÆue
Ë{ 
Node
::vÆuêvÆue; 
	}
}

18 
V
 
	$gëVÆue
(Ëc⁄° {  
Node
::
vÆue
; 
	}
}

19 
Node
* 
	$gëNext
(Ëc⁄° {  
√xt
; 
	}
}

20 
	$£tNext
(
Node
* 
√xt
Ë{ Node::
vÆue
 =Çext; 
	}
}

23 
	g¥iv©e
:

24 
K
 
key
;

25 
V
 
	gvÆue
;

26 
Node
* 
	g√xt
;

31 
	gãm∂©e
<
ty≥«me
 
	gT
>

32 
	$f
(
T
 
s
Ë{ 
°d
::
cout
 << s << std::
ídl
; 
	}
}

36 
	$maö
()

39 
f
<>(100);

40 
f
<
size_t
>(1000u);

43 
	}
}

	@D:\Dev\abc\b.c

2 
	~"comm⁄.h
"

3 
	~"Book.h
"

4 *
	tEÀmít
;

5 (*
	tCom∑ª
)(
	tEÀmít
 , Element);

7 
	$quick_s‹t
(
EÀmít
 *
ba£
, 
n
, 
Com∑ª
 
com∑ª
)

9 
EÀmít
 
ãmp
;

10 
pivŸ
 = 0;

11 
big
=0, 
smÆl
=0;

12 if(
n
<=1)

17 if(
	`com∑ª
(
ba£
[0],ba£[
n
-1])>0)

19 if(
	`com∑ª
(
ba£
[0],ba£[
n
/2])>0)

21 if(
	`com∑ª
(
ba£
[
n
/2],base[n-1])>0)

23 
pivŸ
 = 
n
/2;

27 
pivŸ
 = 
n
-1;

33 if(
	`com∑ª
(
ba£
[
n
/2],base[n-1])>0)

35 
pivŸ
 = 
n
-1;

39 if(
	`com∑ª
(
ba£
[
n
/2],base[0])>0)

41 
pivŸ
 = 
n
/2;

47 
ãmp
 = 
ba£
[
pivŸ
];

48 
ba£
[
pivŸ
] = base[0];

49 
ba£
[0] = 
ãmp
;

51 
big
=0;

52 
smÆl
 = 
n
;

53 
big
<
smÆl
)

55 
big
++; big<
n
; big++)

57 if(
	`com∑ª
(
ba£
[0],ba£[
big
])<0)

62 
smÆl
--; small>0; small--)

64 if(
	`com∑ª
(
ba£
[0],ba£[
smÆl
])>0)

69 if(
big
<
smÆl
)

72 
ãmp
 = 
ba£
[
big
];

73 
ba£
[
big
] = ba£[
smÆl
];

74 
ba£
[
smÆl
] = 
ãmp
;

79 
ãmp
 = 
ba£
[0];

80 
ba£
[0] = ba£[
smÆl
];

81 
ba£
[
smÆl
] = 
ãmp
;

82 
	`quick_s‹t
(
ba£
,
smÆl
,
com∑ª
);

83 
	`quick_s‹t
(
ba£
+
big
,
n
-big,
com∑ª
);

84 
	}
}

85 
	#MAX_BOOK
 4000

	)

86 
Book
 *
	gbooks
[
MAX_BOOK
]={0};

87 
	$Simuœti⁄Inô
()

89 
tôÀ
[
MAX_TIT_LEN
+1]="";

90 
auth‹
[
MAX_AUT_LEN
+1]="";

91 
i
 = 0;

92 
i
=0; i<
MAX_BOOK
; ++i)

94 
	`•rötf
(
tôÀ
,"%010d",
	`ønd
());

95 
	`•rötf
(
auth‹
,"%010d",
	`ønd
());

96 
books
[
i
] = 
	`Book_New
(
tôÀ
,
auth‹
,
	`ønd
());

99 
	}
}

100 
	$Com∑ªByTôÀ
(*
b1
,*
b2
)

102 
Book
 *
book1
=(Book *)
b1
;

103 
Book
 *
book2
=(Book *)
b2
;

104  
	`Book_Com∑ªTôÀ
(
book1
,
book2
->
tôÀ
);

105 
	}
}

106 
	$Com∑ªByNum
(*
b1
,*
b2
)

108 
Book
 *
book1
=(Book *)
b1
;

109 
Book
 *
book2
=(Book *)
b2
;

110  
	`Book_Com∑ªNum
(
book1
,
book2
->
num
);

111 
	}
}

113 
	$Li°Book
(
n
)

115 
i
 = 0;

116 
i
=0; i<
n
; ++i)

118 
	`Book_Võw
(
books
[
i
]);

120 
	}
}

121 
	$Simuœti⁄1
()

123 
	`quick_s‹t
((
EÀmít
 *)
books
,10,
Com∑ªByTôÀ
);

124 
	`¥ötf
("--------¡¶∏Òº¯-------\n");

125 
	`Li°Book
(10);

126 
	`quick_s‹t
((
EÀmít
 *)
books
,10,
Com∑ªByNum
);

127 
	`¥ötf
("--------π¯»£º¯-------\n");

128 
	`Li°Book
(10);

129 
	}
}

130 
	$Simuœti⁄2
()

132 
˛ock_t
 
°
,
ë
;

133 
°
 = 
	`˛ock
();

134 
	`quick_s‹t
((
EÀmít
*)
books
,
MAX_BOOK
/10,
Com∑ªByNum
);

135 
ë
=
	`˛ock
();

136 
	`¥ötf
("%d∞≥ ¡§∑ƒø° ∞…∏∞ Ω√∞£:%d\n",
MAX_BOOK
/10,
ë
-
°
);

137 
°
 = 
	`˛ock
();

138 
	`quick_s‹t
((
EÀmít
*)
books
,
MAX_BOOK
,
Com∑ªByNum
);

139 
ë
=
	`˛ock
();

140 
	`¥ötf
("%d∞≥ ¡§∑ƒø° ∞…∏∞ Ω√∞£:%d\n",
MAX_BOOK
,
ë
-
°
);

141 
	}
}

142 
	$Simuœti⁄CÀ¨
()

144 
i
 = 0;

145 
i
=0; i<
MAX_BOOK
; ++i)

147 
	`Book_Dñëe
(
books
[
i
]);

149 
	}
}

150 
	$maö
()

152 
	`Simuœti⁄Inô
();

153 
	`Simuœti⁄1
();

154 
	`Simuœti⁄2
();

155 
	`Simuœti⁄CÀ¨
();

157 
	}
}

	@D:\Dev\abc\book.c

2 
	~"Book.h
"

3 
	~"Utû.h
"

4 
	~<mÆloc.h
>

6 
Book_Book
(
Book
 *
book
,c⁄° *
tôÀ
,c⁄° *
auth‹
,
num
);

7 
Book
 *
	$Book_New
(c⁄° *
tôÀ
,c⁄° *
auth‹
,
num
)

9 
Book
 *
book
 = 0;

10 
book
 = (
Book
 *)
	`mÆloc
((Book));

11 
	`Book_Book
(
book
,
tôÀ
,
auth‹
,
num
);

12  
book
;

13 
	}
}

14 
	$Book_Book
(
Book
 *
book
,c⁄° *
tôÀ
,c⁄° *
auth‹
,
num
)

16 
	`mem£t
(
book
,0,(
Book
));

17 
	`°∫˝y
(
book
->
tôÀ
,tôÀ,
MAX_TIT_LEN
);

18 
	`°∫˝y
(
book
->
auth‹
,auth‹,
MAX_AUT_LEN
);

19 
book
->
num
 =Çum;

20 
	}
}

21 
	$Book_Dñëe
(
Book
 *
book
)

23 
	`‰ì
(
book
);

24 
	}
}

25 
	$Book_Võw
(
Book
 *
book
)

27 
	`¥ötf
("<%010d>:<%s>\n",
book
->
num
,book->
tôÀ
);

28 
	`¥ötf
("\àÏ†ÄÏûê:%s\n",
book
->
auth‹
);

29 
	}
}

30 
	$Book_Com∑ªTôÀ
(
Book
 *
book
,c⁄° *
tôÀ
)

32  
	`°∫cmp
(
book
->
tôÀ
,tôÀ, 
	`°æí
(title));

33 
	}
}

34 
	$Book_Com∑ªAuth‹
(
Book
 *
book
,c⁄° *
auth‹
)

36  
	`°∫cmp
(
book
->
auth‹
,auth‹, 
	`°æí
(author));

37 
	}
}

38 
	$Book_Com∑ªNum
(
Book
 *
book
,
num
)

40  
book
->
num
-num;

41 
	}
}

	@D:\Dev\abc\build\CMakeFiles\3.19.3\CompilerIdCXX\CMakeCXXCompilerId.cpp

4 #i‚de‡
__˝lu•lus


12 #i‡
deföed
(
__COMO__
)

13 
	#COMPILER_ID
 "Comóu"

	)

15 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__COMO_VERSION__
 / 100)

	)

16 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__COMO_VERSION__
 % 100)

	)

18 #ñi‡
deföed
(
__INTEL_COMPILER
Ë|| deföed(
__ICC
)

19 
	#COMPILER_ID
 "I¡ñ"

	)

20 #i‡
deföed
(
_MSC_VER
)

21 
	#SIMULATE_ID
 "MSVC"

	)

23 #i‡
deföed
(
__GNUC__
)

24 
	#SIMULATE_ID
 "GNU"

	)

27 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__INTEL_COMPILER
/100)

	)

28 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__INTEL_COMPILER
/10 % 10)

	)

29 #i‡
deföed
(
__INTEL_COMPILER_UPDATE
)

30 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__INTEL_COMPILER_UPDATE
)

	)

32 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__INTEL_COMPILER
 % 10)

	)

34 #i‡
deföed
(
__INTEL_COMPILER_BUILD_DATE
)

36 
	#COMPILER_VERSION_TWEAK
 
	`DEC
(
__INTEL_COMPILER_BUILD_DATE
)

	)

38 #i‡
deföed
(
_MSC_VER
)

40 
	#SIMULATE_VERSION_MAJOR
 
	`DEC
(
_MSC_VER
 / 100)

	)

41 
	#SIMULATE_VERSION_MINOR
 
	`DEC
(
_MSC_VER
 % 100)

	)

43 #i‡
deföed
(
__GNUC__
)

44 
	#SIMULATE_VERSION_MAJOR
 
	`DEC
(
__GNUC__
)

	)

45 #ñi‡
deföed
(
__GNUG__
)

46 
	#SIMULATE_VERSION_MAJOR
 
	`DEC
(
__GNUG__
)

	)

48 #i‡
deföed
(
__GNUC_MINOR__
)

49 
	#SIMULATE_VERSION_MINOR
 
	`DEC
(
__GNUC_MINOR__
)

	)

51 #i‡
deföed
(
__GNUC_PATCHLEVEL__
)

52 
	#SIMULATE_VERSION_PATCH
 
	`DEC
(
__GNUC_PATCHLEVEL__
)

	)

55 #ñi‡
deföed
(
__PATHCC__
)

56 
	#COMPILER_ID
 "P©hSˇÀ"

	)

57 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__PATHCC__
)

	)

58 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__PATHCC_MINOR__
)

	)

59 #i‡
deföed
(
__PATHCC_PATCHLEVEL__
)

60 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__PATHCC_PATCHLEVEL__
)

	)

63 #ñi‡
deföed
(
__BORLANDC__
Ë&& deföed(
__CODEGEARC_VERSION__
)

64 
	#COMPILER_ID
 "Emb¨ˇdîo"

	)

65 
	#COMPILER_VERSION_MAJOR
 
	`HEX
(
__CODEGEARC_VERSION__
>>24 & 0x00FF)

	)

66 
	#COMPILER_VERSION_MINOR
 
	`HEX
(
__CODEGEARC_VERSION__
>>16 & 0x00FF)

	)

67 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__CODEGEARC_VERSION__
 & 0xFFFF)

	)

69 #ñi‡
deföed
(
__BORLANDC__
)

70 
	#COMPILER_ID
 "B‹œnd"

	)

72 
	#COMPILER_VERSION_MAJOR
 
	`HEX
(
__BORLANDC__
>>8)

	)

73 
	#COMPILER_VERSION_MINOR
 
	`HEX
(
__BORLANDC__
 & 0xFF)

	)

75 #ñi‡
deföed
(
__WATCOMC__
) && __WATCOMC__ < 1200

76 
	#COMPILER_ID
 "W©com"

	)

78 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__WATCOMC__
 / 100)

	)

79 
	#COMPILER_VERSION_MINOR
 
	`DEC
((
__WATCOMC__
 / 10Ë% 10)

	)

80 #i‡(
__WATCOMC__
 % 10) > 0

81 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__WATCOMC__
 % 10)

	)

84 #ñi‡
deföed
(
__WATCOMC__
)

85 
	#COMPILER_ID
 "O≥nW©com"

	)

87 
	#COMPILER_VERSION_MAJOR
 
	`DEC
((
__WATCOMC__
 - 1100Ë/ 100)

	)

88 
	#COMPILER_VERSION_MINOR
 
	`DEC
((
__WATCOMC__
 / 10Ë% 10)

	)

89 #i‡(
__WATCOMC__
 % 10) > 0

90 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__WATCOMC__
 % 10)

	)

93 #ñi‡
deföed
(
__SUNPRO_CC
)

94 
	#COMPILER_ID
 "SunPro"

	)

95 #i‡
__SUNPRO_CC
 >= 0x5100

97 
	#COMPILER_VERSION_MAJOR
 
	`HEX
(
__SUNPRO_CC
>>12)

	)

98 
	#COMPILER_VERSION_MINOR
 
	`HEX
(
__SUNPRO_CC
>>4 & 0xFF)

	)

99 
	#COMPILER_VERSION_PATCH
 
	`HEX
(
__SUNPRO_CC
 & 0xF)

	)

102 
	#COMPILER_VERSION_MAJOR
 
	`HEX
(
__SUNPRO_CC
>>8)

	)

103 
	#COMPILER_VERSION_MINOR
 
	`HEX
(
__SUNPRO_CC
>>4 & 0xF)

	)

104 
	#COMPILER_VERSION_PATCH
 
	`HEX
(
__SUNPRO_CC
 & 0xF)

	)

107 #ñi‡
deföed
(
__HP_aCC
)

108 
	#COMPILER_ID
 "HP"

	)

110 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__HP_aCC
/10000)

	)

111 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__HP_aCC
/100 % 100)

	)

112 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__HP_aCC
 % 100)

	)

114 #ñi‡
deföed
(
__DECCXX
)

115 
	#COMPILER_ID
 "Com∑q"

	)

117 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__DECCXX_VER
/10000000)

	)

118 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__DECCXX_VER
/100000 % 100)

	)

119 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__DECCXX_VER
 % 10000)

	)

121 #ñi‡
deföed
(
__IBMCPP__
Ë&& deföed(
__COMPILER_VER__
)

122 
	#COMPILER_ID
 "zOS"

	)

124 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__IBMCPP__
/100)

	)

125 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__IBMCPP__
/10 % 10)

	)

126 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__IBMCPP__
 % 10)

	)

128 #ñi‡
deföed
(
__ibmxl__
Ë&& deföed(
__˛™g__
)

129 
	#COMPILER_ID
 "XLCœng"

	)

130 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__ibmxl_vîsi⁄__
)

	)

131 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__ibmxl_ªÀa£__
)

	)

132 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__ibmxl_modifiˇti⁄__
)

	)

133 
	#COMPILER_VERSION_TWEAK
 
	`DEC
(
__ibmxl_±f_fix_Àvñ__
)

	)

136 #ñi‡
deföed
(
__IBMCPP__
Ë&& !deföed(
__COMPILER_VER__
) && __IBMCPP__ >= 800

137 
	#COMPILER_ID
 "XL"

	)

139 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__IBMCPP__
/100)

	)

140 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__IBMCPP__
/10 % 10)

	)

141 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__IBMCPP__
 % 10)

	)

143 #ñi‡
deföed
(
__IBMCPP__
Ë&& !deföed(
__COMPILER_VER__
) && __IBMCPP__ < 800

144 
	#COMPILER_ID
 "VisuÆAge"

	)

146 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__IBMCPP__
/100)

	)

147 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__IBMCPP__
/10 % 10)

	)

148 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__IBMCPP__
 % 10)

	)

150 #ñi‡
deföed
(
__PGI
)

151 
	#COMPILER_ID
 "PGI"

	)

152 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__PGIC__
)

	)

153 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__PGIC_MINOR__
)

	)

154 #i‡
deföed
(
__PGIC_PATCHLEVEL__
)

155 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__PGIC_PATCHLEVEL__
)

	)

158 #ñi‡
deföed
(
_CRAYC
)

159 
	#COMPILER_ID
 "Cøy"

	)

160 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
_RELEASE_MAJOR
)

	)

161 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
_RELEASE_MINOR
)

	)

163 #ñi‡
deföed
(
__TI_COMPILER_VERSION__
)

164 
	#COMPILER_ID
 "TI"

	)

166 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__TI_COMPILER_VERSION__
/1000000)

	)

167 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__TI_COMPILER_VERSION__
/1000 % 1000)

	)

168 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__TI_COMPILER_VERSION__
 % 1000)

	)

170 #ñi‡
deföed
(
__FUJITSU
Ë|| deföed(
__FCC_VERSION
Ë|| deföed(
__fcc_vîsi⁄
)

171 
	#COMPILER_ID
 "Fujôsu"

	)

173 #ñi‡
deföed
(
__ghs__
)

174 
	#COMPILER_ID
 "GHS"

	)

176 #ifde‡
__GHS_VERSION_NUMBER


177 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__GHS_VERSION_NUMBER
 / 100)

	)

178 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__GHS_VERSION_NUMBER
 / 10 % 10)

	)

179 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__GHS_VERSION_NUMBER
 % 10)

	)

182 #ñi‡
deföed
(
__SCO_VERSION__
)

183 
	#COMPILER_ID
 "SCO"

	)

185 #ñi‡
deföed
(
__ARMCC_VERSION
Ë&& !deföed(
__˛™g__
)

186 
	#COMPILER_ID
 "ARMCC"

	)

187 #i‡
__ARMCC_VERSION
 >= 1000000

189 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__ARMCC_VERSION
/1000000)

	)

190 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__ARMCC_VERSION
/10000 % 100)

	)

191 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__ARMCC_VERSION
 % 10000)

	)

194 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__ARMCC_VERSION
/100000)

	)

195 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__ARMCC_VERSION
/10000 % 10)

	)

196 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__ARMCC_VERSION
 % 10000)

	)

200 #ñi‡
deföed
(
__˛™g__
Ë&& deföed(
__≠∂e_buûd_vîsi⁄__
)

201 
	#COMPILER_ID
 "AµÀCœng"

	)

202 #i‡
deföed
(
_MSC_VER
)

203 
	#SIMULATE_ID
 "MSVC"

	)

205 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__˛™g_maj‹__
)

	)

206 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__˛™g_mö‹__
)

	)

207 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__˛™g_∑tchÀvñ__
)

	)

208 #i‡
deföed
(
_MSC_VER
)

210 
	#SIMULATE_VERSION_MAJOR
 
	`DEC
(
_MSC_VER
 / 100)

	)

211 
	#SIMULATE_VERSION_MINOR
 
	`DEC
(
_MSC_VER
 % 100)

	)

213 
	#COMPILER_VERSION_TWEAK
 
	`DEC
(
__≠∂e_buûd_vîsi⁄__
)

	)

215 #ñi‡
deföed
(
__˛™g__
Ë&& deföed(
__ARMCOMPILER_VERSION
)

216 
	#COMPILER_ID
 "ARMCœng"

	)

217 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__ARMCOMPILER_VERSION
/1000000)

	)

218 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__ARMCOMPILER_VERSION
/10000 % 100)

	)

219 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__ARMCOMPILER_VERSION
 % 10000)

	)

220 
	#COMPILER_VERSION_INTERNAL
 
	`DEC
(
__ARMCOMPILER_VERSION
)

	)

222 #ñi‡
deföed
(
__˛™g__
)

223 
	#COMPILER_ID
 "Cœng"

	)

224 #i‡
deföed
(
_MSC_VER
)

225 
	#SIMULATE_ID
 "MSVC"

	)

227 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__˛™g_maj‹__
)

	)

228 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__˛™g_mö‹__
)

	)

229 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__˛™g_∑tchÀvñ__
)

	)

230 #i‡
deföed
(
_MSC_VER
)

232 
	#SIMULATE_VERSION_MAJOR
 
	`DEC
(
_MSC_VER
 / 100)

	)

233 
	#SIMULATE_VERSION_MINOR
 
	`DEC
(
_MSC_VER
 % 100)

	)

236 #ñi‡
deföed
(
__GNUC__
Ë|| deföed(
__GNUG__
)

237 
	#COMPILER_ID
 "GNU"

	)

238 #i‡
deföed
(
__GNUC__
)

239 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__GNUC__
)

	)

241 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__GNUG__
)

	)

243 #i‡
deföed
(
__GNUC_MINOR__
)

244 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__GNUC_MINOR__
)

	)

246 #i‡
deföed
(
__GNUC_PATCHLEVEL__
)

247 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__GNUC_PATCHLEVEL__
)

	)

250 #ñi‡
deföed
(
_MSC_VER
)

251 
	#COMPILER_ID
 "MSVC"

	)

253 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
_MSC_VER
 / 100)

	)

254 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
_MSC_VER
 % 100)

	)

255 #i‡
deföed
(
_MSC_FULL_VER
)

256 #i‡
_MSC_VER
 >= 1400

258 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
_MSC_FULL_VER
 % 100000)

	)

261 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
_MSC_FULL_VER
 % 10000)

	)

264 #i‡
deföed
(
_MSC_BUILD
)

265 
	#COMPILER_VERSION_TWEAK
 
	`DEC
(
_MSC_BUILD
)

	)

268 #ñi‡
deföed
(
__VISUALDSPVERSION__
Ë|| deföed(
__ADSPBLACKFIN__
Ë|| deföed(
__ADSPTS__
Ë|| deföed(
__ADSP21000__
)

269 
	#COMPILER_ID
 "ADSP"

	)

270 #i‡
deföed
(
__VISUALDSPVERSION__
)

272 
	#COMPILER_VERSION_MAJOR
 
	`HEX
(
__VISUALDSPVERSION__
>>24)

	)

273 
	#COMPILER_VERSION_MINOR
 
	`HEX
(
__VISUALDSPVERSION__
>>16 & 0xFF)

	)

274 
	#COMPILER_VERSION_PATCH
 
	`HEX
(
__VISUALDSPVERSION__
>>8 & 0xFF)

	)

277 #ñi‡
deföed
(
__IAR_SYSTEMS_ICC__
Ë|| deföed(
__IAR_SYSTEMS_ICC
)

278 
	#COMPILER_ID
 "IAR"

	)

279 #i‡
deföed
(
__VER__
Ë&& deföed(
__ICCARM__
)

280 
	#COMPILER_VERSION_MAJOR
 
	`DEC
((
__VER__
Ë/ 1000000)

	)

281 
	#COMPILER_VERSION_MINOR
 
	`DEC
(((
__VER__
Ë/ 1000Ë% 1000)

	)

282 
	#COMPILER_VERSION_PATCH
 
	`DEC
((
__VER__
Ë% 1000)

	)

283 
	#COMPILER_VERSION_INTERNAL
 
	`DEC
(
__IAR_SYSTEMS_ICC__
)

	)

284 #ñi‡
deföed
(
__VER__
Ë&& (deföed(
__ICCAVR__
Ë|| deföed(
__ICCRX__
Ë|| deföed(
__ICCRH850__
Ë|| deföed(
__ICCRL78__
Ë|| deföed(
__ICC430__
Ë|| deföed(
__ICCRISCV__
Ë|| deföed(
__ICCV850__
Ë|| deföed(
__ICC8051__
))

285 
	#COMPILER_VERSION_MAJOR
 
	`DEC
((
__VER__
Ë/ 100)

	)

286 
	#COMPILER_VERSION_MINOR
 
	`DEC
((
__VER__
Ë- (((__VER__Ë/ 100)*100))

	)

287 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__SUBVERSION__
)

	)

288 
	#COMPILER_VERSION_INTERNAL
 
	`DEC
(
__IAR_SYSTEMS_ICC__
)

	)

295 #ñi‡
deföed
(
__hpux
Ë|| deföed(
__hpua
)

296 
	#COMPILER_ID
 "HP"

	)

299 
	#COMPILER_ID
 ""

	)

306 c⁄°* 
	göfo_compûî
 = "INFO" ":" "compûî[" 
COMPILER_ID
 "]";

307 #ifde‡
SIMULATE_ID


308 c⁄°* 
	göfo_simuœã
 = "INFO" ":" "simuœã[" 
SIMULATE_ID
 "]";

311 #ifde‡
__QNXNTO__


312 c⁄°* 
	gqnx¡o
 = "INFO" ":" "qnxnto[]";

315 #i‡
deföed
(
_CRAYC
Ë|| deföed(
__¸ay__
)

316 c⁄° *
	göfo_¸ay
 = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";

319 
	#STRINGIFY_HELPER
(
X
Ë#X

	)

320 
	#STRINGIFY
(
X
Ë
	`STRINGIFY_HELPER
(X)

	)

323 #i‡
deföed
(
__löux
Ë|| deföed(
__löux__
Ë|| deföed(
löux
)

324 
	#PLATFORM_ID
 "Löux"

	)

326 #ñi‡
deföed
(
__CYGWIN__
)

327 
	#PLATFORM_ID
 "Cygwö"

	)

329 #ñi‡
deföed
(
__MINGW32__
)

330 
	#PLATFORM_ID
 "MöGW"

	)

332 #ñi‡
deföed
(
__APPLE__
)

333 
	#PLATFORM_ID
 "D¨wö"

	)

335 #ñi‡
deföed
(
_WIN32
Ë|| deföed(
__WIN32__
Ë|| deföed(
WIN32
)

336 
	#PLATFORM_ID
 "Wödows"

	)

338 #ñi‡
deföed
(
__FªeBSD__
Ë|| deföed(
__FªeBSD
)

339 
	#PLATFORM_ID
 "FªeBSD"

	)

341 #ñi‡
deföed
(
__NëBSD__
Ë|| deföed(
__NëBSD
)

342 
	#PLATFORM_ID
 "NëBSD"

	)

344 #ñi‡
deföed
(
__O≥nBSD__
Ë|| deföed(
__OPENBSD
)

345 
	#PLATFORM_ID
 "O≥nBSD"

	)

347 #ñi‡
deföed
(
__sun
Ë|| deföed(
sun
)

348 
	#PLATFORM_ID
 "SunOS"

	)

350 #ñi‡
deföed
(
_AIX
Ë|| deföed(
__AIX
Ë|| deföed(
__AIX__
Ë|| deföed(
__aix
Ë|| deföed(
__aix__
)

351 
	#PLATFORM_ID
 "AIX"

	)

353 #ñi‡
deföed
(
__hpux
Ë|| deföed(
__hpux__
)

354 
	#PLATFORM_ID
 "HP-UX"

	)

356 #ñi‡
deföed
(
__HAIKU__
)

357 
	#PLATFORM_ID
 "Haiku"

	)

359 #ñi‡
deföed
(
__BeOS
Ë|| deföed(
__BEOS__
Ë|| deföed(
_BEOS
)

360 
	#PLATFORM_ID
 "BeOS"

	)

362 #ñi‡
deföed
(
__QNX__
Ë|| deföed(
__QNXNTO__
)

363 
	#PLATFORM_ID
 "QNX"

	)

365 #ñi‡
deföed
(
__åu64
Ë|| deföed(
_åu64
Ë|| deföed(
__TRU64__
)

366 
	#PLATFORM_ID
 "Tru64"

	)

368 #ñi‡
deföed
(
__riscos
Ë|| deföed(
__riscos__
)

369 
	#PLATFORM_ID
 "RISCos"

	)

371 #ñi‡
deföed
(
__söix
Ë|| deföed(
__söix__
Ë|| deföed(
__SINIX__
)

372 
	#PLATFORM_ID
 "SINIX"

	)

374 #ñi‡
deföed
(
__UNIX_SV__
)

375 
	#PLATFORM_ID
 "UNIX_SV"

	)

377 #ñi‡
deföed
(
__bsdos__
)

378 
	#PLATFORM_ID
 "BSDOS"

	)

380 #ñi‡
deföed
(
_MPRAS
Ë|| deföed(
MPRAS
)

381 
	#PLATFORM_ID
 "MP-RAS"

	)

383 #ñi‡
deföed
(
__osf
Ë|| deföed(
__osf__
)

384 
	#PLATFORM_ID
 "OSF1"

	)

386 #ñi‡
deföed
(
_SCO_SV
Ë|| deföed(
SCO_SV
Ë|| deföed(
sco_sv
)

387 
	#PLATFORM_ID
 "SCO_SV"

	)

389 #ñi‡
deföed
(
__u…rix
Ë|| deföed(
__u…rix__
Ë|| deföed(
_ULTRIX
)

390 
	#PLATFORM_ID
 "ULTRIX"

	)

392 #ñi‡
deföed
(
__XENIX__
Ë|| deföed(
_XENIX
Ë|| deföed(
XENIX
)

393 
	#PLATFORM_ID
 "Xíix"

	)

395 #ñi‡
deföed
(
__WATCOMC__
)

396 #i‡
deföed
(
__LINUX__
)

397 
	#PLATFORM_ID
 "Löux"

	)

399 #ñi‡
deföed
(
__DOS__
)

400 
	#PLATFORM_ID
 "DOS"

	)

402 #ñi‡
deföed
(
__OS2__
)

403 
	#PLATFORM_ID
 "OS2"

	)

405 #ñi‡
deföed
(
__WINDOWS__
)

406 
	#PLATFORM_ID
 "Wödows3x"

	)

408 #ñi‡
deföed
(
__VXWORKS__
)

409 
	#PLATFORM_ID
 "VxW‹ks"

	)

412 
	#PLATFORM_ID


	)

415 #ñi‡
deföed
(
__INTEGRITY
)

416 #i‡
deföed
(
INT_178B
)

417 
	#PLATFORM_ID
 "I¡egrôy178"

	)

420 
	#PLATFORM_ID
 "I¡egrôy"

	)

424 
	#PLATFORM_ID


	)

433 #i‡
deföed
(
_WIN32
Ë&& deföed(
_MSC_VER
)

434 #i‡
deföed
(
_M_IA64
)

435 
	#ARCHITECTURE_ID
 "IA64"

	)

437 #ñi‡
deföed
(
_M_X64
Ë|| deföed(
_M_AMD64
)

438 
	#ARCHITECTURE_ID
 "x64"

	)

440 #ñi‡
deföed
(
_M_IX86
)

441 
	#ARCHITECTURE_ID
 "X86"

	)

443 #ñi‡
deföed
(
_M_ARM64
)

444 
	#ARCHITECTURE_ID
 "ARM64"

	)

446 #ñi‡
deföed
(
_M_ARM
)

447 #i‡
_M_ARM
 == 4

448 
	#ARCHITECTURE_ID
 "ARMV4I"

	)

449 #ñi‡
_M_ARM
 == 5

450 
	#ARCHITECTURE_ID
 "ARMV5I"

	)

452 
	#ARCHITECTURE_ID
 "ARMV" 
	`STRINGIFY
(
_M_ARM
)

	)

455 #ñi‡
deföed
(
_M_MIPS
)

456 
	#ARCHITECTURE_ID
 "MIPS"

	)

458 #ñi‡
deföed
(
_M_SH
)

459 
	#ARCHITECTURE_ID
 "SHx"

	)

462 
	#ARCHITECTURE_ID
 ""

	)

465 #ñi‡
deföed
(
__WATCOMC__
)

466 #i‡
deföed
(
_M_I86
)

467 
	#ARCHITECTURE_ID
 "I86"

	)

469 #ñi‡
deföed
(
_M_IX86
)

470 
	#ARCHITECTURE_ID
 "X86"

	)

473 
	#ARCHITECTURE_ID
 ""

	)

476 #ñi‡
deföed
(
__IAR_SYSTEMS_ICC__
Ë|| deföed(
__IAR_SYSTEMS_ICC
)

477 #i‡
deföed
(
__ICCARM__
)

478 
	#ARCHITECTURE_ID
 "ARM"

	)

480 #ñi‡
deföed
(
__ICCRX__
)

481 
	#ARCHITECTURE_ID
 "RX"

	)

483 #ñi‡
deföed
(
__ICCRH850__
)

484 
	#ARCHITECTURE_ID
 "RH850"

	)

486 #ñi‡
deföed
(
__ICCRL78__
)

487 
	#ARCHITECTURE_ID
 "RL78"

	)

489 #ñi‡
deföed
(
__ICCRISCV__
)

490 
	#ARCHITECTURE_ID
 "RISCV"

	)

492 #ñi‡
deföed
(
__ICCAVR__
)

493 
	#ARCHITECTURE_ID
 "AVR"

	)

495 #ñi‡
deföed
(
__ICC430__
)

496 
	#ARCHITECTURE_ID
 "MSP430"

	)

498 #ñi‡
deföed
(
__ICCV850__
)

499 
	#ARCHITECTURE_ID
 "V850"

	)

501 #ñi‡
deföed
(
__ICC8051__
)

502 
	#ARCHITECTURE_ID
 "8051"

	)

505 
	#ARCHITECTURE_ID
 ""

	)

508 #ñi‡
deföed
(
__ghs__
)

509 #i‡
deföed
(
__PPC64__
)

510 
	#ARCHITECTURE_ID
 "PPC64"

	)

512 #ñi‡
deföed
(
__µc__
)

513 
	#ARCHITECTURE_ID
 "PPC"

	)

515 #ñi‡
deföed
(
__ARM__
)

516 
	#ARCHITECTURE_ID
 "ARM"

	)

518 #ñi‡
deföed
(
__x86_64__
)

519 
	#ARCHITECTURE_ID
 "x64"

	)

521 #ñi‡
deföed
(
__i386__
)

522 
	#ARCHITECTURE_ID
 "X86"

	)

525 
	#ARCHITECTURE_ID
 ""

	)

528 #ñi‡
deföed
(
__TI_COMPILER_VERSION__
)

529 #i‡
deföed
(
__TI_ARM__
)

530 
	#ARCHITECTURE_ID
 "ARM"

	)

532 #ñi‡
deföed
(
__MSP430__
)

533 
	#ARCHITECTURE_ID
 "MSP430"

	)

535 #ñi‡
deföed
(
__TMS320C28XX__
)

536 
	#ARCHITECTURE_ID
 "TMS320C28x"

	)

538 #ñi‡
deföed
(
__TMS320C6X__
Ë|| deföed(
_TMS320C6X
)

539 
	#ARCHITECTURE_ID
 "TMS320C6x"

	)

542 
	#ARCHITECTURE_ID
 ""

	)

546 
	#ARCHITECTURE_ID


	)

550 
	#DEC
(
n
) \

551 ('0' + (((
n
) / 10000000)%10)), \

552 ('0' + (((
n
) / 1000000)%10)), \

553 ('0' + (((
n
) / 100000)%10)), \

554 ('0' + (((
n
) / 10000)%10)), \

555 ('0' + (((
n
) / 1000)%10)), \

556 ('0' + (((
n
) / 100)%10)), \

557 ('0' + (((
n
) / 10)%10)), \

558 ('0' + ((
n
Ë% 10))

	)

561 
	#HEX
(
n
) \

562 ('0' + ((
n
)>>28 & 0xF)), \

563 ('0' + ((
n
)>>24 & 0xF)), \

564 ('0' + ((
n
)>>20 & 0xF)), \

565 ('0' + ((
n
)>>16 & 0xF)), \

566 ('0' + ((
n
)>>12 & 0xF)), \

567 ('0' + ((
n
)>>8 & 0xF)), \

568 ('0' + ((
n
)>>4 & 0xF)), \

569 ('0' + ((
n
Ë& 0xF))

	)

572 #ifde‡
COMPILER_VERSION_MAJOR


573 c⁄° 
	göfo_vîsi⁄
[] = {

576 
COMPILER_VERSION_MAJOR
,

577 #ifde‡
COMPILER_VERSION_MINOR


578 '.', 
COMPILER_VERSION_MINOR
,

579 #ifde‡
COMPILER_VERSION_PATCH


580 '.', 
COMPILER_VERSION_PATCH
,

581 #ifde‡
COMPILER_VERSION_TWEAK


582 '.', 
COMPILER_VERSION_TWEAK
,

590 #ifde‡
COMPILER_VERSION_INTERNAL


591 c⁄° 
	göfo_vîsi⁄_öã∫Æ
[] = {

595 
COMPILER_VERSION_INTERNAL
,']','\0'};

599 #ifde‡
SIMULATE_VERSION_MAJOR


600 c⁄° 
	göfo_simuœã_vîsi⁄
[] = {

603 
SIMULATE_VERSION_MAJOR
,

604 #ifde‡
SIMULATE_VERSION_MINOR


605 '.', 
SIMULATE_VERSION_MINOR
,

606 #ifde‡
SIMULATE_VERSION_PATCH


607 '.', 
SIMULATE_VERSION_PATCH
,

608 #ifde‡
SIMULATE_VERSION_TWEAK


609 '.', 
SIMULATE_VERSION_TWEAK
,

620 c⁄°* 
	göfo_∂©f‹m
 = "INFO" ":" "∂©f‹m[" 
PLATFORM_ID
 "]";

621 c⁄°* 
	göfo_¨ch
 = "INFO" ":" "¨ch[" 
ARCHITECTURE_ID
 "]";

625 #i‡
deföed
(
__INTEL_COMPILER
Ë&& deföed(
_MSVC_LANG
) && _MSVC_LANG < 201403L

626 #i‡
deföed
(
__INTEL_CXX11_MODE__
)

627 #i‡
deföed
(
__˝p_aggªg©e_nsdmi
)

628 
	#CXX_STD
 201402L

	)

630 
	#CXX_STD
 201103L

	)

633 
	#CXX_STD
 199711L

	)

635 #ñi‡
deföed
(
_MSC_VER
Ë&& deföed(
_MSVC_LANG
)

636 
	#CXX_STD
 
_MSVC_LANG


	)

638 
	#CXX_STD
 
__˝lu•lus


	)

641 c⁄° * 
	göfo_œnguage_düÀ˘_deÁu…
 = "INFO" ":" "dialect_default["

642 #i‡
CXX_STD
 > 201703L

644 #ñi‡
CXX_STD
 >= 201703L

646 #ñi‡
CXX_STD
 >= 201402L

648 #ñi‡
CXX_STD
 >= 201103L

657 
	$maö
(
¨gc
, * 
¨gv
[])

659 
ªquúe
 = 0;

660 
ªquúe
 +
öfo_compûî
[
¨gc
];

661 
ªquúe
 +
öfo_∂©f‹m
[
¨gc
];

662 #ifde‡
COMPILER_VERSION_MAJOR


663 
ªquúe
 +
öfo_vîsi⁄
[
¨gc
];

665 #ifde‡
COMPILER_VERSION_INTERNAL


666 
ªquúe
 +
öfo_vîsi⁄_öã∫Æ
[
¨gc
];

668 #ifde‡
SIMULATE_ID


669 
ªquúe
 +
öfo_simuœã
[
¨gc
];

671 #ifde‡
SIMULATE_VERSION_MAJOR


672 
ªquúe
 +
öfo_simuœã_vîsi⁄
[
¨gc
];

674 #i‡
	`deföed
(
_CRAYC
Ë|| deföed(
__¸ay__
)

675 
ªquúe
 +
öfo_¸ay
[
¨gc
];

677 
ªquúe
 +
öfo_œnguage_düÀ˘_deÁu…
[
¨gc
];

678 ()
¨gv
;

679  
ªquúe
;

680 
	}
}

	@D:\Dev\abc\build\CMakeFiles\3.19.3\CompilerIdC\CMakeCCompilerId.c

1 #ifde‡
__˝lu•lus


5 #i‡
deföed
(
__18CXX
)

6 
	#ID_VOID_MAIN


	)

8 #i‡
deföed
(
__CLASSIC_C__
)

10 c⁄°

	)

11 vﬁ©ûe

	)

18 #i‡
deföed
(
__INTEL_COMPILER
Ë|| deföed(
__ICC
)

19 
	#COMPILER_ID
 "I¡ñ"

	)

20 #i‡
deföed
(
_MSC_VER
)

21 
	#SIMULATE_ID
 "MSVC"

	)

23 #i‡
deföed
(
__GNUC__
)

24 
	#SIMULATE_ID
 "GNU"

	)

27 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__INTEL_COMPILER
/100)

	)

28 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__INTEL_COMPILER
/10 % 10)

	)

29 #i‡
deföed
(
__INTEL_COMPILER_UPDATE
)

30 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__INTEL_COMPILER_UPDATE
)

	)

32 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__INTEL_COMPILER
 % 10)

	)

34 #i‡
deföed
(
__INTEL_COMPILER_BUILD_DATE
)

36 
	#COMPILER_VERSION_TWEAK
 
	`DEC
(
__INTEL_COMPILER_BUILD_DATE
)

	)

38 #i‡
deföed
(
_MSC_VER
)

40 
	#SIMULATE_VERSION_MAJOR
 
	`DEC
(
_MSC_VER
 / 100)

	)

41 
	#SIMULATE_VERSION_MINOR
 
	`DEC
(
_MSC_VER
 % 100)

	)

43 #i‡
deföed
(
__GNUC__
)

44 
	#SIMULATE_VERSION_MAJOR
 
	`DEC
(
__GNUC__
)

	)

45 #ñi‡
deföed
(
__GNUG__
)

46 
	#SIMULATE_VERSION_MAJOR
 
	`DEC
(
__GNUG__
)

	)

48 #i‡
deföed
(
__GNUC_MINOR__
)

49 
	#SIMULATE_VERSION_MINOR
 
	`DEC
(
__GNUC_MINOR__
)

	)

51 #i‡
deföed
(
__GNUC_PATCHLEVEL__
)

52 
	#SIMULATE_VERSION_PATCH
 
	`DEC
(
__GNUC_PATCHLEVEL__
)

	)

55 #ñi‡
deföed
(
__PATHCC__
)

56 
	#COMPILER_ID
 "P©hSˇÀ"

	)

57 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__PATHCC__
)

	)

58 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__PATHCC_MINOR__
)

	)

59 #i‡
deföed
(
__PATHCC_PATCHLEVEL__
)

60 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__PATHCC_PATCHLEVEL__
)

	)

63 #ñi‡
deföed
(
__BORLANDC__
Ë&& deföed(
__CODEGEARC_VERSION__
)

64 
	#COMPILER_ID
 "Emb¨ˇdîo"

	)

65 
	#COMPILER_VERSION_MAJOR
 
	`HEX
(
__CODEGEARC_VERSION__
>>24 & 0x00FF)

	)

66 
	#COMPILER_VERSION_MINOR
 
	`HEX
(
__CODEGEARC_VERSION__
>>16 & 0x00FF)

	)

67 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__CODEGEARC_VERSION__
 & 0xFFFF)

	)

69 #ñi‡
deföed
(
__BORLANDC__
)

70 
	#COMPILER_ID
 "B‹œnd"

	)

72 
	#COMPILER_VERSION_MAJOR
 
	`HEX
(
__BORLANDC__
>>8)

	)

73 
	#COMPILER_VERSION_MINOR
 
	`HEX
(
__BORLANDC__
 & 0xFF)

	)

75 #ñi‡
deföed
(
__WATCOMC__
) && __WATCOMC__ < 1200

76 
	#COMPILER_ID
 "W©com"

	)

78 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__WATCOMC__
 / 100)

	)

79 
	#COMPILER_VERSION_MINOR
 
	`DEC
((
__WATCOMC__
 / 10Ë% 10)

	)

80 #i‡(
__WATCOMC__
 % 10) > 0

81 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__WATCOMC__
 % 10)

	)

84 #ñi‡
deföed
(
__WATCOMC__
)

85 
	#COMPILER_ID
 "O≥nW©com"

	)

87 
	#COMPILER_VERSION_MAJOR
 
	`DEC
((
__WATCOMC__
 - 1100Ë/ 100)

	)

88 
	#COMPILER_VERSION_MINOR
 
	`DEC
((
__WATCOMC__
 / 10Ë% 10)

	)

89 #i‡(
__WATCOMC__
 % 10) > 0

90 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__WATCOMC__
 % 10)

	)

93 #ñi‡
deföed
(
__SUNPRO_C
)

94 
	#COMPILER_ID
 "SunPro"

	)

95 #i‡
__SUNPRO_C
 >= 0x5100

97 
	#COMPILER_VERSION_MAJOR
 
	`HEX
(
__SUNPRO_C
>>12)

	)

98 
	#COMPILER_VERSION_MINOR
 
	`HEX
(
__SUNPRO_C
>>4 & 0xFF)

	)

99 
	#COMPILER_VERSION_PATCH
 
	`HEX
(
__SUNPRO_C
 & 0xF)

	)

102 
	#COMPILER_VERSION_MAJOR
 
	`HEX
(
__SUNPRO_C
>>8)

	)

103 
	#COMPILER_VERSION_MINOR
 
	`HEX
(
__SUNPRO_C
>>4 & 0xF)

	)

104 
	#COMPILER_VERSION_PATCH
 
	`HEX
(
__SUNPRO_C
 & 0xF)

	)

107 #ñi‡
deföed
(
__HP_cc
)

108 
	#COMPILER_ID
 "HP"

	)

110 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__HP_cc
/10000)

	)

111 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__HP_cc
/100 % 100)

	)

112 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__HP_cc
 % 100)

	)

114 #ñi‡
deföed
(
__DECC
)

115 
	#COMPILER_ID
 "Com∑q"

	)

117 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__DECC_VER
/10000000)

	)

118 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__DECC_VER
/100000 % 100)

	)

119 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__DECC_VER
 % 10000)

	)

121 #ñi‡
deföed
(
__IBMC__
Ë&& deföed(
__COMPILER_VER__
)

122 
	#COMPILER_ID
 "zOS"

	)

124 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__IBMC__
/100)

	)

125 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__IBMC__
/10 % 10)

	)

126 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__IBMC__
 % 10)

	)

128 #ñi‡
deföed
(
__ibmxl__
Ë&& deföed(
__˛™g__
)

129 
	#COMPILER_ID
 "XLCœng"

	)

130 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__ibmxl_vîsi⁄__
)

	)

131 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__ibmxl_ªÀa£__
)

	)

132 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__ibmxl_modifiˇti⁄__
)

	)

133 
	#COMPILER_VERSION_TWEAK
 
	`DEC
(
__ibmxl_±f_fix_Àvñ__
)

	)

136 #ñi‡
deföed
(
__IBMC__
Ë&& !deföed(
__COMPILER_VER__
) && __IBMC__ >= 800

137 
	#COMPILER_ID
 "XL"

	)

139 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__IBMC__
/100)

	)

140 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__IBMC__
/10 % 10)

	)

141 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__IBMC__
 % 10)

	)

143 #ñi‡
deföed
(
__IBMC__
Ë&& !deföed(
__COMPILER_VER__
) && __IBMC__ < 800

144 
	#COMPILER_ID
 "VisuÆAge"

	)

146 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__IBMC__
/100)

	)

147 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__IBMC__
/10 % 10)

	)

148 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__IBMC__
 % 10)

	)

150 #ñi‡
deföed
(
__PGI
)

151 
	#COMPILER_ID
 "PGI"

	)

152 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__PGIC__
)

	)

153 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__PGIC_MINOR__
)

	)

154 #i‡
deföed
(
__PGIC_PATCHLEVEL__
)

155 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__PGIC_PATCHLEVEL__
)

	)

158 #ñi‡
deföed
(
_CRAYC
)

159 
	#COMPILER_ID
 "Cøy"

	)

160 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
_RELEASE_MAJOR
)

	)

161 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
_RELEASE_MINOR
)

	)

163 #ñi‡
deföed
(
__TI_COMPILER_VERSION__
)

164 
	#COMPILER_ID
 "TI"

	)

166 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__TI_COMPILER_VERSION__
/1000000)

	)

167 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__TI_COMPILER_VERSION__
/1000 % 1000)

	)

168 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__TI_COMPILER_VERSION__
 % 1000)

	)

170 #ñi‡
deföed
(
__FUJITSU
Ë|| deföed(
__FCC_VERSION
Ë|| deföed(
__fcc_vîsi⁄
)

171 
	#COMPILER_ID
 "Fujôsu"

	)

173 #ñi‡
deföed
(
__ghs__
)

174 
	#COMPILER_ID
 "GHS"

	)

176 #ifde‡
__GHS_VERSION_NUMBER


177 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__GHS_VERSION_NUMBER
 / 100)

	)

178 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__GHS_VERSION_NUMBER
 / 10 % 10)

	)

179 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__GHS_VERSION_NUMBER
 % 10)

	)

182 #ñi‡
deföed
(
__TINYC__
)

183 
	#COMPILER_ID
 "TöyCC"

	)

185 #ñi‡
deföed
(
__BCC__
)

186 
	#COMPILER_ID
 "Bru˚"

	)

188 #ñi‡
deföed
(
__SCO_VERSION__
)

189 
	#COMPILER_ID
 "SCO"

	)

191 #ñi‡
deföed
(
__ARMCC_VERSION
Ë&& !deföed(
__˛™g__
)

192 
	#COMPILER_ID
 "ARMCC"

	)

193 #i‡
__ARMCC_VERSION
 >= 1000000

195 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__ARMCC_VERSION
/1000000)

	)

196 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__ARMCC_VERSION
/10000 % 100)

	)

197 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__ARMCC_VERSION
 % 10000)

	)

200 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__ARMCC_VERSION
/100000)

	)

201 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__ARMCC_VERSION
/10000 % 10)

	)

202 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__ARMCC_VERSION
 % 10000)

	)

206 #ñi‡
deföed
(
__˛™g__
Ë&& deföed(
__≠∂e_buûd_vîsi⁄__
)

207 
	#COMPILER_ID
 "AµÀCœng"

	)

208 #i‡
deföed
(
_MSC_VER
)

209 
	#SIMULATE_ID
 "MSVC"

	)

211 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__˛™g_maj‹__
)

	)

212 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__˛™g_mö‹__
)

	)

213 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__˛™g_∑tchÀvñ__
)

	)

214 #i‡
deföed
(
_MSC_VER
)

216 
	#SIMULATE_VERSION_MAJOR
 
	`DEC
(
_MSC_VER
 / 100)

	)

217 
	#SIMULATE_VERSION_MINOR
 
	`DEC
(
_MSC_VER
 % 100)

	)

219 
	#COMPILER_VERSION_TWEAK
 
	`DEC
(
__≠∂e_buûd_vîsi⁄__
)

	)

221 #ñi‡
deföed
(
__˛™g__
Ë&& deföed(
__ARMCOMPILER_VERSION
)

222 
	#COMPILER_ID
 "ARMCœng"

	)

223 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__ARMCOMPILER_VERSION
/1000000)

	)

224 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__ARMCOMPILER_VERSION
/10000 % 100)

	)

225 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__ARMCOMPILER_VERSION
 % 10000)

	)

226 
	#COMPILER_VERSION_INTERNAL
 
	`DEC
(
__ARMCOMPILER_VERSION
)

	)

228 #ñi‡
deföed
(
__˛™g__
)

229 
	#COMPILER_ID
 "Cœng"

	)

230 #i‡
deföed
(
_MSC_VER
)

231 
	#SIMULATE_ID
 "MSVC"

	)

233 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__˛™g_maj‹__
)

	)

234 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__˛™g_mö‹__
)

	)

235 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__˛™g_∑tchÀvñ__
)

	)

236 #i‡
deföed
(
_MSC_VER
)

238 
	#SIMULATE_VERSION_MAJOR
 
	`DEC
(
_MSC_VER
 / 100)

	)

239 
	#SIMULATE_VERSION_MINOR
 
	`DEC
(
_MSC_VER
 % 100)

	)

242 #ñi‡
deföed
(
__GNUC__
)

243 
	#COMPILER_ID
 "GNU"

	)

244 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__GNUC__
)

	)

245 #i‡
deföed
(
__GNUC_MINOR__
)

246 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__GNUC_MINOR__
)

	)

248 #i‡
deföed
(
__GNUC_PATCHLEVEL__
)

249 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__GNUC_PATCHLEVEL__
)

	)

252 #ñi‡
deföed
(
_MSC_VER
)

253 
	#COMPILER_ID
 "MSVC"

	)

255 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
_MSC_VER
 / 100)

	)

256 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
_MSC_VER
 % 100)

	)

257 #i‡
deföed
(
_MSC_FULL_VER
)

258 #i‡
_MSC_VER
 >= 1400

260 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
_MSC_FULL_VER
 % 100000)

	)

263 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
_MSC_FULL_VER
 % 10000)

	)

266 #i‡
deföed
(
_MSC_BUILD
)

267 
	#COMPILER_VERSION_TWEAK
 
	`DEC
(
_MSC_BUILD
)

	)

270 #ñi‡
deföed
(
__VISUALDSPVERSION__
Ë|| deföed(
__ADSPBLACKFIN__
Ë|| deföed(
__ADSPTS__
Ë|| deföed(
__ADSP21000__
)

271 
	#COMPILER_ID
 "ADSP"

	)

272 #i‡
deföed
(
__VISUALDSPVERSION__
)

274 
	#COMPILER_VERSION_MAJOR
 
	`HEX
(
__VISUALDSPVERSION__
>>24)

	)

275 
	#COMPILER_VERSION_MINOR
 
	`HEX
(
__VISUALDSPVERSION__
>>16 & 0xFF)

	)

276 
	#COMPILER_VERSION_PATCH
 
	`HEX
(
__VISUALDSPVERSION__
>>8 & 0xFF)

	)

279 #ñi‡
deföed
(
__IAR_SYSTEMS_ICC__
Ë|| deföed(
__IAR_SYSTEMS_ICC
)

280 
	#COMPILER_ID
 "IAR"

	)

281 #i‡
deföed
(
__VER__
Ë&& deföed(
__ICCARM__
)

282 
	#COMPILER_VERSION_MAJOR
 
	`DEC
((
__VER__
Ë/ 1000000)

	)

283 
	#COMPILER_VERSION_MINOR
 
	`DEC
(((
__VER__
Ë/ 1000Ë% 1000)

	)

284 
	#COMPILER_VERSION_PATCH
 
	`DEC
((
__VER__
Ë% 1000)

	)

285 
	#COMPILER_VERSION_INTERNAL
 
	`DEC
(
__IAR_SYSTEMS_ICC__
)

	)

286 #ñi‡
deföed
(
__VER__
Ë&& (deföed(
__ICCAVR__
Ë|| deföed(
__ICCRX__
Ë|| deföed(
__ICCRH850__
Ë|| deföed(
__ICCRL78__
Ë|| deföed(
__ICC430__
Ë|| deföed(
__ICCRISCV__
Ë|| deföed(
__ICCV850__
Ë|| deföed(
__ICC8051__
))

287 
	#COMPILER_VERSION_MAJOR
 
	`DEC
((
__VER__
Ë/ 100)

	)

288 
	#COMPILER_VERSION_MINOR
 
	`DEC
((
__VER__
Ë- (((__VER__Ë/ 100)*100))

	)

289 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__SUBVERSION__
)

	)

290 
	#COMPILER_VERSION_INTERNAL
 
	`DEC
(
__IAR_SYSTEMS_ICC__
)

	)

293 #ñi‡
deföed
(
__SDCC_VERSION_MAJOR
Ë|| deföed(
SDCC
)

294 
	#COMPILER_ID
 "SDCC"

	)

295 #i‡
deföed
(
__SDCC_VERSION_MAJOR
)

296 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
__SDCC_VERSION_MAJOR
)

	)

297 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
__SDCC_VERSION_MINOR
)

	)

298 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
__SDCC_VERSION_PATCH
)

	)

301 
	#COMPILER_VERSION_MAJOR
 
	`DEC
(
SDCC
/100)

	)

302 
	#COMPILER_VERSION_MINOR
 
	`DEC
(
SDCC
/10 % 10)

	)

303 
	#COMPILER_VERSION_PATCH
 
	`DEC
(
SDCC
 % 10)

	)

310 #ñi‡
deföed
(
__hpux
Ë|| deföed(
__hpua
)

311 
	#COMPILER_ID
 "HP"

	)

314 
	#COMPILER_ID
 ""

	)

321 c⁄°* 
	göfo_compûî
 = "INFO" ":" "compûî[" 
COMPILER_ID
 "]";

322 #ifde‡
SIMULATE_ID


323 c⁄°* 
	göfo_simuœã
 = "INFO" ":" "simuœã[" 
SIMULATE_ID
 "]";

326 #ifde‡
__QNXNTO__


327 c⁄°* 
	gqnx¡o
 = "INFO" ":" "qnxnto[]";

330 #i‡
deföed
(
_CRAYC
Ë|| deföed(
__¸ay__
)

331 c⁄° *
	göfo_¸ay
 = "INFO" ":" "compiler_wrapper[CrayPrgEnv]";

334 
	#STRINGIFY_HELPER
(
X
Ë#X

	)

335 
	#STRINGIFY
(
X
Ë
	`STRINGIFY_HELPER
(X)

	)

338 #i‡
deföed
(
__löux
Ë|| deföed(
__löux__
Ë|| deföed(
löux
)

339 
	#PLATFORM_ID
 "Löux"

	)

341 #ñi‡
deföed
(
__CYGWIN__
)

342 
	#PLATFORM_ID
 "Cygwö"

	)

344 #ñi‡
deföed
(
__MINGW32__
)

345 
	#PLATFORM_ID
 "MöGW"

	)

347 #ñi‡
deföed
(
__APPLE__
)

348 
	#PLATFORM_ID
 "D¨wö"

	)

350 #ñi‡
deföed
(
_WIN32
Ë|| deföed(
__WIN32__
Ë|| deföed(
WIN32
)

351 
	#PLATFORM_ID
 "Wödows"

	)

353 #ñi‡
deföed
(
__FªeBSD__
Ë|| deföed(
__FªeBSD
)

354 
	#PLATFORM_ID
 "FªeBSD"

	)

356 #ñi‡
deföed
(
__NëBSD__
Ë|| deföed(
__NëBSD
)

357 
	#PLATFORM_ID
 "NëBSD"

	)

359 #ñi‡
deföed
(
__O≥nBSD__
Ë|| deföed(
__OPENBSD
)

360 
	#PLATFORM_ID
 "O≥nBSD"

	)

362 #ñi‡
deföed
(
__sun
Ë|| deföed(
sun
)

363 
	#PLATFORM_ID
 "SunOS"

	)

365 #ñi‡
deföed
(
_AIX
Ë|| deföed(
__AIX
Ë|| deföed(
__AIX__
Ë|| deföed(
__aix
Ë|| deföed(
__aix__
)

366 
	#PLATFORM_ID
 "AIX"

	)

368 #ñi‡
deföed
(
__hpux
Ë|| deföed(
__hpux__
)

369 
	#PLATFORM_ID
 "HP-UX"

	)

371 #ñi‡
deföed
(
__HAIKU__
)

372 
	#PLATFORM_ID
 "Haiku"

	)

374 #ñi‡
deföed
(
__BeOS
Ë|| deföed(
__BEOS__
Ë|| deföed(
_BEOS
)

375 
	#PLATFORM_ID
 "BeOS"

	)

377 #ñi‡
deföed
(
__QNX__
Ë|| deföed(
__QNXNTO__
)

378 
	#PLATFORM_ID
 "QNX"

	)

380 #ñi‡
deföed
(
__åu64
Ë|| deföed(
_åu64
Ë|| deföed(
__TRU64__
)

381 
	#PLATFORM_ID
 "Tru64"

	)

383 #ñi‡
deföed
(
__riscos
Ë|| deföed(
__riscos__
)

384 
	#PLATFORM_ID
 "RISCos"

	)

386 #ñi‡
deföed
(
__söix
Ë|| deföed(
__söix__
Ë|| deföed(
__SINIX__
)

387 
	#PLATFORM_ID
 "SINIX"

	)

389 #ñi‡
deföed
(
__UNIX_SV__
)

390 
	#PLATFORM_ID
 "UNIX_SV"

	)

392 #ñi‡
deföed
(
__bsdos__
)

393 
	#PLATFORM_ID
 "BSDOS"

	)

395 #ñi‡
deföed
(
_MPRAS
Ë|| deföed(
MPRAS
)

396 
	#PLATFORM_ID
 "MP-RAS"

	)

398 #ñi‡
deföed
(
__osf
Ë|| deföed(
__osf__
)

399 
	#PLATFORM_ID
 "OSF1"

	)

401 #ñi‡
deföed
(
_SCO_SV
Ë|| deföed(
SCO_SV
Ë|| deföed(
sco_sv
)

402 
	#PLATFORM_ID
 "SCO_SV"

	)

404 #ñi‡
deföed
(
__u…rix
Ë|| deföed(
__u…rix__
Ë|| deföed(
_ULTRIX
)

405 
	#PLATFORM_ID
 "ULTRIX"

	)

407 #ñi‡
deföed
(
__XENIX__
Ë|| deföed(
_XENIX
Ë|| deföed(
XENIX
)

408 
	#PLATFORM_ID
 "Xíix"

	)

410 #ñi‡
deföed
(
__WATCOMC__
)

411 #i‡
deföed
(
__LINUX__
)

412 
	#PLATFORM_ID
 "Löux"

	)

414 #ñi‡
deföed
(
__DOS__
)

415 
	#PLATFORM_ID
 "DOS"

	)

417 #ñi‡
deföed
(
__OS2__
)

418 
	#PLATFORM_ID
 "OS2"

	)

420 #ñi‡
deföed
(
__WINDOWS__
)

421 
	#PLATFORM_ID
 "Wödows3x"

	)

423 #ñi‡
deföed
(
__VXWORKS__
)

424 
	#PLATFORM_ID
 "VxW‹ks"

	)

427 
	#PLATFORM_ID


	)

430 #ñi‡
deföed
(
__INTEGRITY
)

431 #i‡
deföed
(
INT_178B
)

432 
	#PLATFORM_ID
 "I¡egrôy178"

	)

435 
	#PLATFORM_ID
 "I¡egrôy"

	)

439 
	#PLATFORM_ID


	)

448 #i‡
deföed
(
_WIN32
Ë&& deföed(
_MSC_VER
)

449 #i‡
deföed
(
_M_IA64
)

450 
	#ARCHITECTURE_ID
 "IA64"

	)

452 #ñi‡
deföed
(
_M_X64
Ë|| deföed(
_M_AMD64
)

453 
	#ARCHITECTURE_ID
 "x64"

	)

455 #ñi‡
deföed
(
_M_IX86
)

456 
	#ARCHITECTURE_ID
 "X86"

	)

458 #ñi‡
deföed
(
_M_ARM64
)

459 
	#ARCHITECTURE_ID
 "ARM64"

	)

461 #ñi‡
deföed
(
_M_ARM
)

462 #i‡
_M_ARM
 == 4

463 
	#ARCHITECTURE_ID
 "ARMV4I"

	)

464 #ñi‡
_M_ARM
 == 5

465 
	#ARCHITECTURE_ID
 "ARMV5I"

	)

467 
	#ARCHITECTURE_ID
 "ARMV" 
	`STRINGIFY
(
_M_ARM
)

	)

470 #ñi‡
deföed
(
_M_MIPS
)

471 
	#ARCHITECTURE_ID
 "MIPS"

	)

473 #ñi‡
deföed
(
_M_SH
)

474 
	#ARCHITECTURE_ID
 "SHx"

	)

477 
	#ARCHITECTURE_ID
 ""

	)

480 #ñi‡
deföed
(
__WATCOMC__
)

481 #i‡
deföed
(
_M_I86
)

482 
	#ARCHITECTURE_ID
 "I86"

	)

484 #ñi‡
deföed
(
_M_IX86
)

485 
	#ARCHITECTURE_ID
 "X86"

	)

488 
	#ARCHITECTURE_ID
 ""

	)

491 #ñi‡
deföed
(
__IAR_SYSTEMS_ICC__
Ë|| deföed(
__IAR_SYSTEMS_ICC
)

492 #i‡
deföed
(
__ICCARM__
)

493 
	#ARCHITECTURE_ID
 "ARM"

	)

495 #ñi‡
deföed
(
__ICCRX__
)

496 
	#ARCHITECTURE_ID
 "RX"

	)

498 #ñi‡
deföed
(
__ICCRH850__
)

499 
	#ARCHITECTURE_ID
 "RH850"

	)

501 #ñi‡
deföed
(
__ICCRL78__
)

502 
	#ARCHITECTURE_ID
 "RL78"

	)

504 #ñi‡
deföed
(
__ICCRISCV__
)

505 
	#ARCHITECTURE_ID
 "RISCV"

	)

507 #ñi‡
deföed
(
__ICCAVR__
)

508 
	#ARCHITECTURE_ID
 "AVR"

	)

510 #ñi‡
deföed
(
__ICC430__
)

511 
	#ARCHITECTURE_ID
 "MSP430"

	)

513 #ñi‡
deföed
(
__ICCV850__
)

514 
	#ARCHITECTURE_ID
 "V850"

	)

516 #ñi‡
deföed
(
__ICC8051__
)

517 
	#ARCHITECTURE_ID
 "8051"

	)

520 
	#ARCHITECTURE_ID
 ""

	)

523 #ñi‡
deföed
(
__ghs__
)

524 #i‡
deföed
(
__PPC64__
)

525 
	#ARCHITECTURE_ID
 "PPC64"

	)

527 #ñi‡
deföed
(
__µc__
)

528 
	#ARCHITECTURE_ID
 "PPC"

	)

530 #ñi‡
deföed
(
__ARM__
)

531 
	#ARCHITECTURE_ID
 "ARM"

	)

533 #ñi‡
deföed
(
__x86_64__
)

534 
	#ARCHITECTURE_ID
 "x64"

	)

536 #ñi‡
deföed
(
__i386__
)

537 
	#ARCHITECTURE_ID
 "X86"

	)

540 
	#ARCHITECTURE_ID
 ""

	)

543 #ñi‡
deföed
(
__TI_COMPILER_VERSION__
)

544 #i‡
deföed
(
__TI_ARM__
)

545 
	#ARCHITECTURE_ID
 "ARM"

	)

547 #ñi‡
deföed
(
__MSP430__
)

548 
	#ARCHITECTURE_ID
 "MSP430"

	)

550 #ñi‡
deföed
(
__TMS320C28XX__
)

551 
	#ARCHITECTURE_ID
 "TMS320C28x"

	)

553 #ñi‡
deföed
(
__TMS320C6X__
Ë|| deföed(
_TMS320C6X
)

554 
	#ARCHITECTURE_ID
 "TMS320C6x"

	)

557 
	#ARCHITECTURE_ID
 ""

	)

561 
	#ARCHITECTURE_ID


	)

565 
	#DEC
(
n
) \

566 ('0' + (((
n
) / 10000000)%10)), \

567 ('0' + (((
n
) / 1000000)%10)), \

568 ('0' + (((
n
) / 100000)%10)), \

569 ('0' + (((
n
) / 10000)%10)), \

570 ('0' + (((
n
) / 1000)%10)), \

571 ('0' + (((
n
) / 100)%10)), \

572 ('0' + (((
n
) / 10)%10)), \

573 ('0' + ((
n
Ë% 10))

	)

576 
	#HEX
(
n
) \

577 ('0' + ((
n
)>>28 & 0xF)), \

578 ('0' + ((
n
)>>24 & 0xF)), \

579 ('0' + ((
n
)>>20 & 0xF)), \

580 ('0' + ((
n
)>>16 & 0xF)), \

581 ('0' + ((
n
)>>12 & 0xF)), \

582 ('0' + ((
n
)>>8 & 0xF)), \

583 ('0' + ((
n
)>>4 & 0xF)), \

584 ('0' + ((
n
Ë& 0xF))

	)

587 #ifde‡
COMPILER_VERSION_MAJOR


588 c⁄° 
	göfo_vîsi⁄
[] = {

591 
COMPILER_VERSION_MAJOR
,

592 #ifde‡
COMPILER_VERSION_MINOR


593 '.', 
COMPILER_VERSION_MINOR
,

594 #ifde‡
COMPILER_VERSION_PATCH


595 '.', 
COMPILER_VERSION_PATCH
,

596 #ifde‡
COMPILER_VERSION_TWEAK


597 '.', 
COMPILER_VERSION_TWEAK
,

605 #ifde‡
COMPILER_VERSION_INTERNAL


606 c⁄° 
	göfo_vîsi⁄_öã∫Æ
[] = {

610 
COMPILER_VERSION_INTERNAL
,']','\0'};

614 #ifde‡
SIMULATE_VERSION_MAJOR


615 c⁄° 
	göfo_simuœã_vîsi⁄
[] = {

618 
SIMULATE_VERSION_MAJOR
,

619 #ifde‡
SIMULATE_VERSION_MINOR


620 '.', 
SIMULATE_VERSION_MINOR
,

621 #ifde‡
SIMULATE_VERSION_PATCH


622 '.', 
SIMULATE_VERSION_PATCH
,

623 #ifde‡
SIMULATE_VERSION_TWEAK


624 '.', 
SIMULATE_VERSION_TWEAK
,

635 c⁄°* 
	göfo_∂©f‹m
 = "INFO" ":" "∂©f‹m[" 
PLATFORM_ID
 "]";

636 c⁄°* 
	göfo_¨ch
 = "INFO" ":" "¨ch[" 
ARCHITECTURE_ID
 "]";

640 #i‡!
deföed
(
__STDC__
)

641 #i‡(
deföed
(
_MSC_VER
Ë&& !deföed(
__˛™g__
)) \

642 || (
deföed
(
__ibmxl__
Ë|| 
	$deföed
(
__IBMC__
))

643 
	#C_DIALECT
 "90"

	)

645 
	#C_DIALECT


	)

647 #ñi‡
__STDC_VERSION__
 >= 201000L

648 
	#C_DIALECT
 "11"

	)

649 #ñi‡
__STDC_VERSION__
 >= 199901L

650 
	#C_DIALECT
 "99"

	)

652 
	#C_DIALECT
 "90"

	)

654 c⁄° * 
öfo_œnguage_düÀ˘_deÁu…
 =

655 "INFO" ":" "düÀ˘_deÁu…[" 
C_DIALECT
 "]";

659 #ifde‡
ID_VOID_MAIN


660 
	$maö
(Ë{
	}
}

662 #i‡
deföed
(
__CLASSIC_C__
)

663 
	$maö
(
¨gc
, 
¨gv
) argc; *argv[];

665 
	$maö
(
¨gc
, * 
¨gv
[])

668 
ªquúe
 = 0;

669 
ªquúe
 +
öfo_compûî
[
¨gc
];

670 
ªquúe
 +
öfo_∂©f‹m
[
¨gc
];

671 
ªquúe
 +
öfo_¨ch
[
¨gc
];

672 #ifde‡
COMPILER_VERSION_MAJOR


673 
ªquúe
 +
öfo_vîsi⁄
[
¨gc
];

675 #ifde‡
COMPILER_VERSION_INTERNAL


676 
ªquúe
 +
öfo_vîsi⁄_öã∫Æ
[
¨gc
];

678 #ifde‡
SIMULATE_ID


679 
ªquúe
 +
öfo_simuœã
[
¨gc
];

681 #ifde‡
SIMULATE_VERSION_MAJOR


682 
ªquúe
 +
öfo_simuœã_vîsi⁄
[
¨gc
];

684 #i‡
	`deföed
(
_CRAYC
Ë|| deföed(
__¸ay__
)

685 
ªquúe
 +
öfo_¸ay
[
¨gc
];

687 
ªquúe
 +
öfo_œnguage_düÀ˘_deÁu…
[
¨gc
];

688 ()
¨gv
;

689  
ªquúe
;

690 
	}
}

	@D:\Dev\abc\c20.cpp

1 
	~<io°ªam
>

2 
	~<c⁄˚±s
>

4 
	gãm∂©e
<
ty≥«me
 
	gT
>

5 
c⁄˚±
 
	gNumbî
 = 
°d
::
öãgøl
<
T
> || std::
Êﬂtög_poöt
<T>;

7 
	gãm∂©e
 <
ty≥«me
 
	gT
>

8 
ªquúes
 
	gNumbî
<
	gT
>

9 ˛as†
	cWøµîNumbî
 {

10 
	mpublic
:

11 
	$WøµîNumbî
(
T
 
num
Ë: 
	$m_num
(
num
){}

12 
T
 
	$gëNum
(Ë{  
m_num
; 
	}
}

13 
	g¥iv©e
:

14 
T
 
m_num
;

17 
	$maö
(){

18 
WøµîNumbî
 
wn
{42};

20 
°d
::
cout
 << 
wn
.
	`gëNum
(Ë<< std::
ídl
;

23 
	}
}

	@D:\Dev\abc\common.h

3 #¥agm®
⁄˚


5 
	~<°dio.h
>

7 
	~<c⁄io.h
>

9 
	~<mÆloc.h
>

10 
	~<mem‹y.h
>

11 
	~<time.h
>

13 #¥agm®
w¨nög
(
dißbÀ
:4996)

	@D:\Dev\abc\hash.hpp

1 #i‚de‡
__HASH_H


2 
	#__HASH_H


	)

4 
hash
(c⁄° *
key
);

	@D:\Dev\abc\hash_map.hpp

1 #¥agm®
⁄˚


3 
	~<io°ªam
>

4 
	~"Utû.h
"

6 
	#HASH_MAP_USE_KEYSET
 0

	)

8 
	gãm∂©e
<
ty≥«me
 
	gKey
,Åy≥«mê
	gVÆue
>

9 
	sKeyVÆueVõwî
 {

10 
›î©‹
()(c⁄° 
	mKey
& 
	mkey
, c⁄° 
	mVÆue
& 
	mvÆue
) const {

11 
¥ötf
("(%s, %s)", 
key
, 
vÆue
);

15 
	gãm∂©e
<
ty≥«me
 
	gKey
>

16 
	sKeyM©chî
 {

17 
›î©‹
()(c⁄° 
	mKey
& 
	ma
, c⁄° Key& 
	mb
) const {

18  
	mªöãΩªt_ˇ°
<>(
	ma
Ë-ÑeöãΩªt_ˇ°<>(
	mb
);

21 
	gãm∂©e
<
ty≥«me
 
	gK
>

22 
	sKeyHash
 {

23 
›î©‹
(Ë(c⁄° 
	mK
& 
	mkey
) const {

24  
	mªöãΩªt_ˇ°
<>(
	mkey
);

28 
	gãm∂©e
 <
ty≥«me
 
	gKey
,Åy≥«mê
	gVÆue
>

29 ˛as†
	cHashNode
 {

30 
	mpublic
:

31 
	$HashNode
(
Key
 
key
, 
VÆue
 
vÆue
Ë: 
	`key
(key), 
	`vÆue
(vÆueË, 
	$√xt
(
nuŒ±r
) {}

32 
Key
 
	$gëKey
(Ëc⁄° {  
key
; 
	}
}

33 
VÆue
 
	$gëVÆue
(Ëc⁄°{  
vÆue
; 
	}
}

34 
HashNode
* 
	$gëNext
(Ëc⁄° {  
√xt
; 
	}
}

35 
	$£tVÆue
(
VÆue
 
vÆue
Ë{ 
HashNode
::vÆuêvÆue; 
	}
}

36 
	$£tNext
(
HashNode
* 
√xt
Ë{ HashNode::√xà√xt; 
	}
}

38 
	g¥iv©e
:

39 
Key
 
key
;

40 
VÆue
 
	gvÆue
;

41 
HashNode
* 
	g√xt
;

44 
	gãm∂©e
 <
ty≥«me
 
	gKey
,

45 
ty≥«me
 
	gVÆue
,

46 
ty≥«me
 
	gKeyVÆueVõwî
 = 
KeyVÆueVõwî
<
Key
,
	gVÆue
>,

47 
ty≥«me
 
	gHash
 = 
KeyHash
<
Key
>,

48 
ty≥«me
 
	gKeyM©chî
 = 
KeyM©chî
<
Key
>,

49 
size_t
 
	gTabÀSize
 = 1000000>

50 ˛as†
	cHashM≠
 {

51 
public
:

52 
	$HashM≠
() {

53 
èbÀ
 = 
√w
 
HashNode
<
Key
,
VÆue
>* [
TabÀSize
];

54 
	`mem£t
(
èbÀ
, 0, (
HashNode
<
Key
, 
VÆue
>*)*
TabÀSize
);

55 
size
 = 0;

56 #i‡
HASH_MAP_USE_KEYSET


57 
keySë
 = 
nuŒ±r
;

61 ~
	$HashM≠
() {

63 
i
 = 0; i < 
TabÀSize
; ++i) {

64 
HashNode
<
Key
,
VÆue
> *
íåy
 = 
èbÀ
[
i
];

66 #i‡
HASH_MAP_USE_KEYSET


67 
HashNode
<
Key
,> *
keyIãm
 = 
keySë
; keyIãm;keyIãm=keyIãm->
	`gëNext
()) {

68 
HashNode
<
Key
,> *
keyIãmPªv
 = 
keyIãm
;

69 
HashNode
<
Key
,
VÆue
> *
íåy
 = 
èbÀ
[
keyIãm
->
	`gëVÆue
()];

72 
íåy
 !
NULL
) {

73 
HashNode
<
Key
,
VÆue
> *
¥e
 = 
íåy
;

74 
íåy
 =É¡ry->
	`gëNext
();

75 
dñëe
 
¥e
;

78 
èbÀ
[
i
] = 
nuŒ±r
;

80 #i‡
HASH_MAP_USE_KEYSET


81 
èbÀ
[
keyIãm
->
	`gëVÆue
()] = 
nuŒ±r
;

82 
dñëe
 
keyIãmPªv
;

85 
dñëe
[] 
èbÀ
;

86 
èbÀ
 = 
nuŒ±r
;

87 #i‡
HASH_MAP_USE_KEYSET


88 
keySë
 = 
nuŒ±r
;

90 
	}
}

92 
	$gëSize
(Ëc⁄° {  
size
; 
	}
}

94 
boﬁ
 
	$gë
(c⁄° 
Key
 &
key
, 
VÆue
 &
vÆue
) {

95 
hashVÆue
 = 
	`hashFunc
(
key
Ë% 
TabÀSize
;

96 
HashNode
<
Key
, 
VÆue
>* 
íåy
 = 
èbÀ
[
hashVÆue
];

98 
íåy
 !
nuŒ±r
) {

99 if(!
	`keyM©chî
(
íåy
->
	`gëKey
(), 
key
)) {

100 
vÆue
 = 
íåy
->
	`gëVÆue
();

101  
åue
;

103 
íåy
 =É¡ry->
	`gëNext
();

105  
Ál£
;

106 
	}
}

108 
	$put
(c⁄° 
Key
& 
key
, c⁄° 
VÆue
& 
vÆue
) {

109 
hashVÆue
 = 
	`hashFunc
(
key
Ë% 
TabÀSize
;

110 
HashNode
<
Key
, 
VÆue
> *
¥ev
 = 
nuŒ±r
;

111 
HashNode
<
Key
, 
VÆue
> *
íåy
 = 
èbÀ
[
hashVÆue
];

113 
íåy
 !
nuŒ±r
 && !
	`keyM©chî
”¡ry->
	`gëKey
(), 
key
)) {

114 
¥ev
 = 
íåy
;

115 
íåy
 =É¡ry->
	`gëNext
();

118 if(
íåy
==
nuŒ±r
){

119 
íåy
 = 
√w
 
HashNode
<
Key
, 
VÆue
>(
key
, 
vÆue
);

120 if(
¥ev
==
nuŒ±r
) {

121 
èbÀ
[
hashVÆue
] = 
íåy
;

123 
¥ev
->
	`£tNext
(
íåy
);

127 
íåy
->
	`£tVÆue
(
vÆue
);

129 
size
++;

132 #i‡
HASH_MAP_USE_KEYSET


133 
HashNode
<
Key
,>* 
√wKey
 = 
√w
 HashNode<Key, >(
key
, 
hashVÆue
);

134 if(
keySë
) {

135 
√wKey
->
	`£tNext
(
keySë
);

136 
keySë
 = 
√wKey
;

139 
keySë
 = 
√wKey
;

140 
keySë
->
	`£tNext
(
nuŒ±r
);

143 
	}
}

145 
	$ªmove
(c⁄° 
Key
& 
key
) {

146 
hashVÆue
 = 
	`hashFunc
(
key
Ë% 
TabÀSize
;

147 
HashNode
<
Key
, 
VÆue
> *
¥ev
 = 
nuŒ±r
;

148 
HashNode
<
Key
, 
VÆue
> *
íåy
 = 
èbÀ
[
hashVÆue
];

150 
íåy
 !
nuŒ±r
&&É¡ry->
	`gëKey
(Ë!
key
) {

151 
¥ev
 = 
íåy
;

152 
íåy
 =É¡ry->
	`gëNext
();

155 if(
íåy
==
nuŒ±r
) {

159 if(
¥ev
==
nuŒ±r
) {

160 
èbÀ
[
hashVÆue
] = 
íåy
->
	`gëNext
();

163 
¥ev
->
	`£tNext
(
íåy
->
	`gëNext
());

165 
dñëe
 
íåy
;

167 
size
--;

168 
	}
}

170 
	$¥öt
() {

172 
HashNode
<
Key
, 
VÆue
>* 
íåy
 = 
nuŒ±r
;

174 
	`¥ötf
("size=%Œd,ÅabÀSize=%Œd\n", 
size
, 
TabÀSize
);

175 
i
 = 0;i<
TabÀSize
;i++) {

177 
íåy
 = 
èbÀ
[
i
];

179 if(!
íåy
) ;

181 
	`¥ötf
("[%d] : ", 
i
);

183 
íåy
) {

184 
	`keyVÆueVõwî
(
íåy
->
	`gëKey
(),É¡ry->
	`gëVÆue
());

185 
íåy
 =É¡ry->
	`gëNext
();

186 if(
íåy
Ë
	`¥ötf
(", ");

188 
	`¥ötf
("\n");

190 
	}
}

192 
	$˛óøŒ
() {

193 
i
 = 0; i < 
TabÀSize
; ++i) {

194 
HashNode
<
Key
,
VÆue
> *
íåy
 = 
èbÀ
[
i
];

195 
íåy
 !
NULL
) {

196 
HashNode
<
Key
,
VÆue
> *
¥e
 = 
íåy
;

197 
íåy
 =É¡ry->
	`gëNext
();

198 
dñëe
 
¥e
;

200 
èbÀ
[
i
] = 
nuŒ±r
;

202 
size
 = 0;

203 
	}
}

205 
	g¥iv©e
:

206 
HashNode
<
Key
, 
	gVÆue
>** 
	gèbÀ
;

207 
size_t
 
	gsize
;

208 #i‡
HASH_MAP_USE_KEYSET


209 
	gHashNode
<
	gKey
, >* 
	gkeySë
;

211 
Hash
 
	ghashFunc
;

212 
KeyM©chî
 
	gkeyM©chî
;

213 
KeyVÆueVõwî
 
	gkeyVÆueVõwî
;

	@D:\Dev\abc\hello_g.cpp

1 
	~<gtk/gtk.h
>

3 
	$¥öt_hñlo
 (
GtkWidgë
 *
widgë
, 
gpoöãr
 
d©a
)

5 
	`g_¥öt
 ("Hello World\n");

6 
	}
}

8 
	$a˘iv©e
 (
GtkAµliˇti⁄
 *
≠p
, 
gpoöãr
 
u£r_d©a
)

10 
GtkWidgë
 *
wödow
;

11 
GtkWidgë
 *
buâ⁄
;

13 
wödow
 = 
	`gtk_≠∂iˇti⁄_wödow_√w
 (
≠p
);

14 
	`gtk_wödow_£t_tôÀ
 (
	`GTK_WINDOW
 (
wödow
), "Window");

15 
	`gtk_wödow_£t_deÁu…_size
 (
	`GTK_WINDOW
 (
wödow
), 200, 200);

17 
buâ⁄
 = 
	`gtk_buâ⁄_√w_wôh_œbñ
 ("Hello World");

18 
	`g_sig«l_c⁄√˘
 (
buâ⁄
, "˛icked", 
	`G_CALLBACK
 (
¥öt_hñlo
), 
NULL
);

19 
	`gtk_wödow_£t_chûd
 (
	`GTK_WINDOW
 (
wödow
), 
buâ⁄
);

21 
	`gtk_wödow_¥e£¡
 (
	`GTK_WINDOW
 (
wödow
));

22 
	}
}

24 
	$maö
 (
¨gc
, *
¨gv
[]) {

25 
GtkAµliˇti⁄
 *
≠p
;

26 
°©us
;

28 
≠p
 = 
	`gtk_≠∂iˇti⁄_√w
 ("‹g.gtk.exam∂e", 
G_APPLICATION_FLAGS_NONE
);

29 
	`g_sig«l_c⁄√˘
 (
≠p
, "a˘iv©e", 
	`G_CALLBACK
 (
a˘iv©e
), 
NULL
);

30 
°©us
 = 
	`g_≠∂iˇti⁄_run
 (
	`G_APPLICATION
 (
≠p
), 
¨gc
, 
¨gv
);

31 
	`g_obje˘_uƒef
 (
≠p
);

33  
°©us
;

34 
	}
}

	@D:\Dev\abc\inc\List.h

1 #¥agm®
⁄˚


3 
	~<°dio.h
>

4 
	~<mÆloc.h
>

6 * 
	tEÀmít
;

7 
_Node
 
	tNode
;

8 
Node
* 
	tLök
;

9 
	s_Node
 {

10 
Lök
 
	m¥ev
;

11 
Lök
 
	m√xt
;

12 
EÀmít
 
	md©a
;

13 
Node
* 
√wNode
(
EÀmít
 
d©a
);

14 
ö£π
(
Lök
 
pos
, Lök 
node
);

15 
disc⁄√˘
();

18 
_Li°
 
	tLi°
;

19 
	s_Li°
 {

20 
Lök
 
	mhód
;

21 
Lök
 
	mèû
;

22 
	mußge
;

23 
Li°
* 
√wLi°
();

24 
di•o£
();

25 
push_back
(
EÀmít
 
d©a
);

26 
ö£π
(
EÀmít
 
d©a
);

27 
Lök
 
begö
();

28 
Lök
 
íd
();

29 
îa£
(
Lök
 
pos
);

30 
boﬁ
 
föd
(
EÀmít
 
d©a
, (*
comp
)(EÀmíà
vÆ
));

	@D:\Dev\abc\inc\aaa.h

1 #¥agm®
⁄˚


3 
	~<io°ªam
>

4 
	~<°rög
>

6 ˛as†
	cAAA
 {

7 
	m¥iv©e
:

8 
°d
::
°rög
 
«me
;

9 
	mvÆue
;

11 
	mpublic
:

12 c⁄° 
°d
::
°rög
 
gëName
();

13 c⁄° 
gëVÆue
();

	@D:\Dev\abc\list.hpp

1 #i‚de‡
__LIST_HPP


2 
	#__HASH_HPP


	)

4 
	~<°dlib.h
>

6 
	sLi°Elmt_
{

7 * 
	md©a
;

8 
Li°Elmt_
 *
	m√xt
;

9 } 
	tLi°Elmt
;

11 
	sLi°_
 {

12 
	msize
;

13 (*
	mm©ch
)(c⁄° *
	ma
, c⁄° * 
	mb
);

14 (*
	mde°roy
)(* 
	md©a
);

16 
Li°Elmt
 *
	mhód
;

17 
Li°Elmt
 *
	mèû
;

18 } 
	tLi°
;

20 
li°_öô
(
Li°
* 
li°
, (*
de°roy
)(*
d©a
));

21 
	`li°_de°roy
(
Li°
* 
li°
);

22 
	`li°_ös_√xt
(
Li°
* 
li°
, 
Li°Elmt
* 
ñemít
, c⁄° * 
d©a
);

23 
	`li°_ªm_√xt
(
Li°
* 
li°
, 
Li°Elmt
* 
ñemít
, ** 
d©a
);

25 
	#li°_size
(
li°
Ë(÷i°)->
size
)

	)

26 
	#li°_hód
(
li°
Ë(÷i°)->
hód
)

	)

27 
	#li°_èû
(
li°
Ë(÷i°)->
èû
)

	)

29 
	#li°_is_hód
(
li°
, 
ñemít
Ë(”ÀmítË=÷i°)->
hód
 1: 0)

	)

30 
	#li°_is_èû
(
ñemít
Ë(”Àmít)->
√xt
 =
NULL
 ? 1 : 0)

	)

	@D:\Dev\abc\mhashmap.cpp

1 
	~<ve˘‹
>

2 
	~<li°
>

3 
	~<°rög
>

4 
	~"io°ªam
"

6 
usög
 
«me•a˚
 
	g°d
;

8 ˛as†
	cI¡Hash


10 
	mpublic
:

11 
	$›î©‹
()(c⁄° &
vÆue
) {  value; }

12 
	}
};

13 ˛as†
	cI¡Cmp


15 
	mpublic
:

16 
	$›î©‹
()(c⁄° &
a
, c⁄° &
b
) { á==b; }

17 
	}
};

19 
	gãm∂©e
<
˛ass
 
	g_Key
,˛as†
	g_VÆue
, cœs†
	g_HashFun
, cœs†
	g_Cmp
>

20 ˛as†
	chashM≠


22 
	m∑ú
<
	t_Key
, 
	t_VÆue
> 
	tHashPaú
;

23 
	mli°
<
	tHashPaú
> 
	tHashLi°
;

24 
	mve˘‹
<
	tHashLi°
> 
	tHashTabÀ
;

26 
	mpublic
:

27 
	$hashM≠
(
size
):
	$m_size
(
size
)

29 
hash_èbÀ
.
	`ªsize
(
size
);

31 
	$add
(c⁄° 
_Key
 &
key
, c⁄° 
_VÆue
 &
vÆue
)

33 
ödex
 = 
	`hashFun
(
key
Ë% 
m_size
;

35 
HashLi°
 &
li°
 = 
hash_èbÀ
[
ödex
];

37 
li°
.
	`push_back
(
∑ú
<
_Key
, 
_VÆue
>(
key
, 
vÆue
));

38 
	}
}

39 
_VÆue
 
	$föd
(c⁄° 
_Key
 &
key
)

41 
ödex
 = 
	`hashFun
(
key
Ë% 
m_size
;

43 
HashLi°
 &
li°
 = 
hash_èbÀ
[
ödex
];

45 autÿ
ô
 = 
li°
.
	`begö
();

47 
ô
 !
li°
.
	`íd
())

49 i‡(
	`hashCmp
(
ô
->
fú°
, 
key
))

51  
ô
->
£c⁄d
;

54 
ô
++;

57  
NULL
;

58 
	}
}

60 
	g¥iv©e
:

61 
m_size
;

62 
HashTabÀ
 
	ghash_èbÀ
;

64 
_HashFun
 
	ghashFun
;

65 
_Cmp
 
	ghashCmp
;

68 
	$maö
()

70 
hashM≠
<, 
°rög
, 
I¡Hash
, 
I¡Cmp
> 
	`m≠
(100);

72 
m≠
.
	`add
(9527, "9527");

73 
m≠
.
	`add
(135, "135");

74 
m≠
.
	`add
(2, "2");

75 
m≠
.
	`add
(567, "567");

76 
m≠
.
	`add
(888, "888");

77 
m≠
.
	`add
(3669, "3669");

79 
cout
 << 
m≠
.
	`föd
(9527Ë<< 
ídl
;

80 
cout
 << 
m≠
.
	`föd
(567Ë<< 
ídl
;

81 
	}
}

	@D:\Dev\abc\mzhelper.h

1 
	~<°dlib.h
>

3 
	~<zmq.h
>

5 * 
	$zmq_ªcv_buf
(* 
sockë
, * 
buf
, 
size_t
 
buf_size
) {

6 
size
 = 
	`zmq_ªcv
(
sockë
, 
buf
, 
buf_size
, 0);

7 if(
size
 < 0Ë 
NULL
;

8 if(
size
>
buf_size
-1) size = buf_size-1;

9 
buf
[
size
] = 0;

10  
buf
;

11 
	}
}

	@D:\Dev\abc\test_qsort.cpp

1 
	~<c°dio
>

2 
	~<mÆloc.h
>

4 
	$mem£t
(*
p
, 
c
, 
size_t
 
Àn
) {

5 * 
µ
 = (*)
p
;

6 
Àn
--Ë*
µ
++=
c
;

7 
	}
}

9 
	$mem˝y
(*
d°
,*
§c
,
size_t
 
Àn
) {

10 * 
dd
 = (*)
d°
;

11 * 
ss
 = (*)
§c
;

12 
Àn
--Ë*
dd
++=*
ss
++;

13 
	}
}

15 
	$sw≠
(* 
a
, * 
b
, 
size_t
 
Àn
, * 
t
 = 
nuŒ±r
) {

16 * 
â
 = 
nuŒ±r
;

17 if(!
t
Ë{ 
â
 = 
	`mÆloc
(
Àn
);Å =Åt; }

18 
	`mem˝y
(
t
, 
a
, 
Àn
);

19 
	`mem˝y
(
a
, 
b
, 
Àn
);

20 
	`mem˝y
(
b
, 
t
, 
Àn
);

21 i‡(
â
Ë
	`‰ì
(tt);

22 
	}
}

24 
qs‹t_∑πôi⁄
(* 
d©aSë
, 
size_t
 
d©aSize
, 
À·
, 
right
);

25 
qs‹t
(* 
d©aSë
, 
size_t
 
d©aSize
, (*
d©aCom∑øt‹
)(*
a
, *
b
), 
À·
, 
right
);

26 
	`I¡Com∑øt‹
(* 
a
, * 
b
);

28 
	$qs‹t_∑πôö
(* 
d©aSë
, 
À·
, 
right
) {

29 
fú°
 = 
À·
;

30 
pivŸ
 = 
d©aSë
[
fú°
];

32 
À·
++;

33 
â
;

35 
À·
<=
right
) {

36 
d©aSë
[
À·
]<=
pivŸ
&&À·<
right
) ++left;

37 
d©aSë
[
right
]>
pivŸ
&&
À·
<=right) --right;

38 if(
À·
<
right
)

39 
	`sw≠
(&
d©aSë
[
À·
], &d©aSë[
right
], (), &
â
);

43 
	`sw≠
(&
d©aSë
[
fú°
], &d©aSë[
right
], (), &
â
);

44  
right
;

45 
	}
}

47 
	$qs‹t
(* 
d©aSë
, 
À·
, 
right
) {

48 if(
À·
<
right
) {

49 
idx
 = 
	`qs‹t_∑πôö
(
d©aSë
, 
À·
, 
right
);

50 
	`qs‹t
(
d©aSë
, 
À·
, 
idx
-1);

51 
	`qs‹t
(
d©aSë
, 
idx
+1, 
right
);

53 
	}
}

56 
¥öt
(* 
d©aSë
, 
size_t
 
Àn
, (*
¥ötD©a
)(* 
d©a
)) {

57 * 
•
 = (*)
d©aSë
;

58 
	`¥ötf
("{Àngth:%d, d©a:[", 
Àn
);

59 
size_t
 
i
 = 0;i<
Àn
;i++) {

60 
	`¥ötD©a
(
•
+
i
); if(i<
Àn
-1Ë
	`¥ötf
(", ");

62 
	`¥ötf
("]}\n");

63 
	}
}

65 
	$¥ötI¡
(* 
d©a
) {

66 
	`¥ötf
("%d", *((*)
d©a
));

67 
	}
}

69 
	$maö
(
¨gc
, * 
¨gv
[]) {

70 * 
¨r
 = 
nuŒ±r
;

71 
¨r_Àn
 = 0, 
v
;

72 
	`sˇnf
("%d", &
¨r_Àn
);

73 
¨r
 = (*)
	`mÆloc
(()*
¨r_Àn
);

74 if(!
¨r
Ë{ 
	`Ârötf
(
°dîr
, "ÁûÅÿmÆloc(sizeof(öt)*%d)", 
¨r_Àn
);  1; }

75 
	`mem£t
(
¨r
, '\0', 
¨r_Àn
);

76 
i
 = 0;ò< 
¨r_Àn
;i++) {

77 
	`sˇnf
("%d", 
¨r
+
i
);

80 
	`¥ötf
("Bef‹ê: "); 
	`¥öt
(
¨r
, 
¨r_Àn
, 
¥ötI¡
);

82 
	`qs‹t
((*)
¨r
, (), 
I¡Com∑øt‹
, 0, 
¨r_Àn
-1);

84 
	`¥ötf
("A·î : "); 
	`¥öt
(
¨r
, 
¨r_Àn
, 
¥ötI¡
);

87 
	}
}

89 
	$I¡Com∑øt‹
(* 
a
, * 
b
) {

90 * 
Ø
 = (*)
a
;

91 * 
bb
 = (*)
b
;

92 if(*
Ø
 =*
bb
)  0;

93  *
Ø
 > * 
bb
 ? 1 : -1;

94 
	}
}

97 
qs‹t_∑πôi⁄
(* 
d©aSë
, 
size_t
 
d©aSize
, (*
d©aCom∑øt‹
)(* 
a
, * 
b
), 
À·
, 
right
) {

98 
fú°
 = 
À·
;

99 
À·
<=
right
) {

100 
	`d©aCom∑øt‹
((*)
d©aSë
+
À·
, (*)d©aSë+
fú°
)<0 &&Üe·<=
right
) ++left;

101 
	`d©aCom∑øt‹
((*)
d©aSë
+
right
,(*)d©aSë+
fú°
)>=0&& 
À·
<right) --right;

102 if(
À·
<
right
Ë
	`sw≠
((*)
d©aSë
+À·, (*)d©aSë+right, 
d©aSize
);

105 
	`sw≠
((*)
d©aSë
+
fú°
, (*)d©aSë+
right
, 
d©aSize
);

106  
right
;

107 
	}
}

109 
qs‹t
(* 
d©aSë
, 
size_t
 
d©aSize
, (*
d©aCom∑øt‹
)(*
a
,*
b
), 
À·
, 
right
) {

110 if(
À·
<
right
) {

111 
idx
 = 
	`qs‹t_∑πôi⁄
(
d©aSë
, 
d©aSize
, 
d©aCom∑øt‹
, 
À·
, 
right
);

112 
	`qs‹t
(
d©aSë
, 
d©aSize
, 
d©aCom∑øt‹
, 
À·
, 
idx
-1);

113 
	`qs‹t
(
d©aSë
, 
d©aSize
, 
d©aCom∑øt‹
, 
idx
+1, 
right
);

115 
	}
}

	@D:\Dev\abc\z.cpp

1 
	~<io°ªam
>

2 
	~<c°rög
>

3 
	~<zmq.h
>

4 
	~<c°dlib
>

5 
	~<as£π.h
>

7 
	gg_run
 = 1;

9 
	$maö
(
¨gc
, ** 
¨gv
)

12 * 
c⁄ãxt
 = 
	`zmq_˘x_√w
();

13 * 
ª•⁄dî
 = 
	`zmq_sockë
(
c⁄ãxt
, 
ZMQ_REP
);

14 
rc
 = 
	`zmq_böd
(
ª•⁄dî
, "tcp://*:5555");

15 
	`as£π
(
rc
 == 0);

18 c⁄° 
size_t
 
LEN_BUFFER
 = 8096;

19 
rcv_buf
[
LEN_BUFFER
];

20 
¢d_buf
[
LEN_BUFFER
];

21 c⁄° * 
SND_MSG
 = "REQ:%s, REP:%s";

22 
size_t
 
rcv_Àn_limô
 = 10;

23 
g_run
)

25 
	`mem£t
(
rcv_buf
, 0, 
LEN_BUFFER
);

26 
	`zmq_ªcv
(
ª•⁄dî
, 
rcv_buf
, 
rcv_Àn_limô
, 0);

28 i‡(
	`°æí
(
rcv_buf
Ë> 
rcv_Àn_limô
) {

29 
	`Ârötf
(
°dîr
, "W¨nög :Ñcv_bu‡i†ovîÊow.Üí=%Œd\n", 
rcv_Àn_limô
);

32 
	`¥ötf
(">>%s\n", 
rcv_buf
);

34 if(
	`°r°r
(
rcv_buf
, "-shutdown")) {

35 
	`zmq_£nd
(
ª•⁄dî
, "server goingÅo shutdown", 14, 0);

36 
g_run
 = 0;

41 
	`mem£t
(
¢d_buf
, 0, 
LEN_BUFFER
);

42 
	`¢¥ötf
(
¢d_buf
, 
LEN_BUFFER
, 
SND_MSG
, 
rcv_buf
, "ACK");

43 
	`zmq_£nd
(
ª•⁄dî
, 
¢d_buf
, 
	`°æí
(snd_buf), 0);

47 
	}
}

	@D:\Dev\abc\zcli.cpp

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<±hªad.h
>

5 
	~<as£π.h
>

6 
	~<zmq.h
>

8 #i‡
deföed
(
_WIN32
Ë|| deföed(
_WIN64
)

9 
	~<wödows.h
>

11 
	~<time.h
>

14 c⁄° 
size_t
 
	gLEN_BUF
 = 8096;

15 c⁄° 
size_t
 
	gLEN_SVR_URL
 = 1024;

17 
	gg_run
 = 1;

19 *
h™dÀ_ªcv
(* 
ªque°î
);

20 *
h™dÀ_mesßge
(* 
ªque°î
);

23 
	$maö
(
¨gc
, **
¨gv
)

26 
svr_¥Ÿocﬁ
[8] = {"tcp"};

27 
svr_addr
[256] = {"localhost"};

28 
svr_p‹t
 = 5555;

29 
svr_uæ
[
LEN_SVR_URL
] = {0};

31 
i
 = 1;i<
¨gc
;i++) {

32 if(
¨gc
>
i
+1&&(!
	`°rcmp
(
¨gv
[i],"-v")

33 || !
	`°rcmp
(
¨gv
[
i
],"--help")

34 || !
	`°rcmp
(
¨gv
[
i
],"--version"))) {

35 
maj‹
,
mö‹
,
m©ch
;

36 
	`zmq_vîsi⁄
(&
maj‹
,&
mö‹
,&
m©ch
);

37 
	`¥ötf
("0MQ Vîsi⁄:%d.%d.%d\n", 
maj‹
, 
mö‹
, 
m©ch
);

40 if(
¨gc
>
i
+1&&(!
	`°rcmp
(
¨gv
[i],"-p") || !strcmp(argv[i],"--port"))) {

41 
svr_p‹t
 = 
	`©oi
(
¨gv
[
i
+1]); i++;

43 if(
¨gc
>
i
+1&&(!
	`°rcmp
(
¨gv
[i],"-pt") || !strcmp(argv[i],"--protocol"))) {

44 
	`°∫˝y
(
svr_¥Ÿocﬁ
, 
¨gv
[
i
+1], 
	`°æí
(argv[i+1])); i++;

46 if(
¨gc
>
i
+1&&(!
	`°rcmp
(
¨gv
[i],"-a") || !strcmp(argv[i],"--addr"))) {

47 
	`°∫˝y
(
svr_addr
, 
¨gv
[
i
+1], 
	`°æí
(argv[i+1])); i++;

51 
	`¢¥ötf
(
svr_uæ
, 
LEN_SVR_URL
, "%s://%s:%d", 
svr_¥Ÿocﬁ
, 
svr_addr
, 
svr_p‹t
);

53 
	`¥ötf
("INFO>>C⁄√˘ögÅÿechÿ£rvî:%†\n", 
svr_uæ
);

54 * 
c⁄ãxt
 = 
	`zmq_˘x_√w
();

55 * 
ªque°î
 = 
	`zmq_sockë
(
c⁄ãxt
, 
ZMQ_REQ
);

56 
	`zmq_c⁄√˘
(
ªque°î
, 
svr_uæ
);

58 
	`sy°em
("pause");

60 
±hªad_t
 
£ndî
;

63 if(
	`±hªad_¸óã
(&
£ndî
, 
NULL
, 
h™dÀ_mesßge
, 
ªque°î
)) {

64 
	`≥º‹
("ERR>>Error creatingÅhread : sender");  1;

71 
g_run
)

73 
	`SÀï
(1);

76 if(
	`±hªad_joö
(
£ndî
, 
NULL
)Ë{ 
	`≥º‹
("ERR>>Error joiningÅhread:sender");  2; }

80 if(
ªque°î
Ë
	`zmq_˛o£
(requester);

81 if(
c⁄ãxt
Ë
	`zmq_˘x_de°roy
(context);

84 
	}
}

86 *
	$h™dÀ_ªcv
(* 
ªque°î
)

88 
rcv_buf
[
LEN_BUF
] = {0};

89 
g_run
)

91 
size_t
 
rcv_size
 = 
	`zmq_ªcv
(
ªque°î
, 
rcv_buf
, 
LEN_BUF
, 0);

92 if(
rcv_size
<0Ë 
NULL
;

93 if(
rcv_size
>
LEN_BUF
-1)Ñcv_size = LEN_BUF-1;

94 
rcv_buf
[
rcv_size
] = 0;

95 
	`¥ötf
("RCV>>[%Œu]%s\n", 
rcv_size
, 
rcv_buf
);

96 
	`mem£t
(
rcv_buf
, 0, 
rcv_size
);

98  
NULL
;

99 
	}
}

101 *
	$h™dÀ_mesßge
(* 
ªque°î
)

103 
buf
[
LEN_BUF
] = {0};

104 
rcv_buf
[
LEN_BUF
] = {0};

105 
g_run
)

107 
	`¥ötf
("USR<<"); 
	`fÊush
(
°dout
);

108 
	`sˇnf
("%[^\n]%*c", 
buf
);

110 if(
	`°r°r
(
buf
, "-exit") || strstr(buf, "-shutdown")) {

111 
	`¥ötf
("INFO>>Éxit by user\n");

112 
g_run
 = 0;

114 if(
	`°r°r
(
buf
, "-shutdown")) {

115 
	`zmq_£nd
(
ªque°î
, "-shutdown", 
	`°æí
("-shutdown"), 0);

118 if(
ªque°î
Ë
	`zmq_˛o£
(requester);

121 if(
	`°æí
(
buf
)<1) {

122 
	`¥ötf
("INFO>>Émpty string with '\\n'\n");

123 
	`fÊush
(
°dö
);

127 
	`zmq_£nd
(
ªque°î
, 
buf
, 
	`°æí
(buf), 0);

129 
size_t
 
rcv_size
 = 
	`zmq_ªcv
(
ªque°î
, 
rcv_buf
, 
LEN_BUF
, 0);

130 if(
rcv_size
<0) {

132  
NULL
; 
g_run
 = 0;

135 if(
rcv_size
>
LEN_BUF
-1)Ñcv_size = LEN_BUF-1;

136 
rcv_buf
[
rcv_size
] = 0;

137 
	`¥ötf
("RCV>>[%Œu]%s\n", 
rcv_size
, 
rcv_buf
);

139 
	`mem£t
(
buf
, 0, 
	`°æí
(buf));

140 
	`mem£t
(
rcv_buf
, 0, 
rcv_size
);

143  
NULL
;

144 
	}
}

	@D:\Dev\abc\zecho.cpp

1 
	~<°dio.h
>

4 
	~<as£π.h
>

5 
	~<±hªad.h
>

6 
	~<zmq.h
>

7 
	~"mzhñ≥r.h
"

8 
	~"Utû.h
"

10 c⁄° 
size_t
 
	gLEN_BIND_URL
 = 256;

11 c⁄° 
size_t
 
	gLEN_BUF
 = 8096;

13 
	gg_run
 = 1;

14 *
h™dÀ_ª•⁄£
(* 
ª•⁄dî
);

16 
	$maö
(
¨gc
, ** 
¨gv
)

18 
böd_uæ
[256] = {0};

19 
böd_addr
[128] = {"*"};

20 
böd_¥Ÿocﬁ
[8] = {"tcp"};

21 
böd_p‹t
 = 5555;

23 
i
 = 1;i<
¨gc
;i++) {

24 if(
¨gc
>
i
+1&&(!
	`°rcmp
(
¨gv
[i],"-v")

25 || !
	`°rcmp
(
¨gv
[
i
],"--help")

26 || !
	`°rcmp
(
¨gv
[
i
],"--version"))) {

27 
maj‹
,
mö‹
,
m©ch
;

28 
	`zmq_vîsi⁄
(&
maj‹
,&
mö‹
,&
m©ch
);

29 
	`¥ötf
("0MQ Vîsi⁄:%d.%d.%d\n", 
maj‹
, 
mö‹
, 
m©ch
);

32 if(
¨gc
>
i
+1&&(!
	`°rcmp
(
¨gv
[i],"-p") || !strcmp(argv[i],"--port"))) {

33 
böd_p‹t
 = 
	`©oi
(
¨gv
[
i
+1]); i++;

35 if(
¨gc
>
i
+1&&(!
	`°rcmp
(
¨gv
[i],"-pt") || !strcmp(argv[i],"--protocol"))) {

36 
	`°∫˝y
(
böd_¥Ÿocﬁ
, 
¨gv
[
i
+1], 
	`°æí
(argv[i+1])); i++;

38 if(
¨gc
>
i
+1&&(!
	`°rcmp
(
¨gv
[i],"-a") || !strcmp(argv[i],"--addr"))) {

39 
	`°∫˝y
(
böd_addr
, 
¨gv
[
i
+1], 
	`°æí
(argv[i+1])); i++;

42 
	`¢¥ötf
(
böd_uæ
, 
LEN_BIND_URL
, "%s://%s:%d", 
böd_¥Ÿocﬁ
, 
böd_addr
, 
böd_p‹t
);

43 
	`¥ötf
("INF: C⁄√˘ögÅÿ0MQ : %s\n", 
böd_uæ
);

46 * 
c⁄ãxt
 = 
	`zmq_˘x_√w
();

47 * 
ª•⁄dî
 = 
	`zmq_sockë
(
c⁄ãxt
, 
ZMQ_REP
);

48 
rc
 = 
	`zmq_böd
(
ª•⁄dî
, 
böd_uæ
);

50 
	`as£π
(
rc
 == 0);

52 
±hªad_t
 
thr_ª•⁄dî
;

54 if(
	`±hªad_¸óã
(&
thr_ª•⁄dî
, 
NULL
, 
h™dÀ_ª•⁄£
, 
ª•⁄dî
)) {

55 
	`≥º‹
("ERR>>Error creatingÅhread :Ñesponder");  1;

58 
buf
[
LEN_BUF
] = {0};

59 
g_run
) {

60 
	`¥ötf
("CMD<<"); 
	`fÊush
(
°dout
);

61 
	`sˇnf
("%s", 
buf
);

63 if(
	`°r°r
(
buf
, "exit") || strstr(buf, "quit")) {

64 
	`¥ötf
("INFO>>Éxit by user\n");

66 if(
ª•⁄dî
Ë
	`zmq_˛o£
(responder);

67 if(
c⁄ãxt
Ë
	`zmq_˘x_de°roy
(context);

69 
g_run
 = 0;

74 if(
	`±hªad_joö
(
thr_ª•⁄dî
, 
NULL
)Ë{ 
	`≥º‹
("ERR>>Error joiningÅhread:responder");  2; }

76 if(
ª•⁄dî
Ë
	`zmq_˛o£
(responder);

77 if(
c⁄ãxt
Ë
	`zmq_˘x_de°roy
(context);

80 
	}
}

82 *
	$h™dÀ_ª•⁄£
(* 
ª•⁄dî
)

84 
rcv_buf
[
LEN_BUF
] = {0};

85 
¢d_buf
[
LEN_BUF
] = {0};

86 c⁄° * 
SND_MSG
 = "REQ:%s, REP:%s";

87 
g_run
)

89 
rcv_size
 = 
	`zmq_ªcv
(
ª•⁄dî
, 
rcv_buf
, 
LEN_BUF
, 0);

90 if(
rcv_size
<0) ;

91 if(
rcv_size
>
LEN_BUF
-1)Ñcv_size = LEN_BUF-1;

92 
rcv_buf
[
rcv_size
] = 0;

94 
	`¥ötf
("DBG:RCV>>[%d]%s\n", 
rcv_size
, 
rcv_buf
);

96 
	`¢¥ötf
(
¢d_buf
, 
LEN_BUF
, 
SND_MSG
, 
rcv_buf
, "ACK");

97 
	`zmq_£nd
(
ª•⁄dî
, 
¢d_buf
, 
	`°æí
(snd_buf), 0);

98 
	`¥ötf
("DBG:REP>>%s\n", 
¢d_buf
);

100 
	`mem£t
(
rcv_buf
, 0, 
LEN_BUF
);

101 
	`mem£t
(
¢d_buf
, 0, 
LEN_BUF
);

103  
ª•⁄dî
;

104 
	}
}

	@Book.h

4 #¥agm®
⁄˚


5 
	#MAX_TIT_LEN
 200

	)

6 
	#MAX_AUT_LEN
 20

	)

8 
_Book
 
	tBook
;

9 
	s_Book
 {

10 
	mtôÀ
[
MAX_TIT_LEN
];

11 
	mauth‹
[
MAX_AUT_LEN
];

12 
	mnum
;

15 
Book
 *
Book_New
(c⁄° *
tôÀ
,c⁄° *
auth‹
,
num
);

16 
Book_Dñëe
(
Book
* 
book
);

17 
Book_Võw
(
Book
* 
book
);

18 
Book_Com∑ªTôÀ
(
Book
 *
book
,c⁄° *
tôÀ
);

19 
Book_Com∑ªAuth‹
(
Book
 *
book
, c⁄° *
auth‹
);

20 
Book_Com∑ªNum
(
Book
 *
book
,
num
);

	@List.h

1 #¥agm®
⁄˚


3 
	sMyD©a
 {

4 
	md©a
;

7 
	sNode
 {

8 
	md©a
;

9 
Node
 *
	m¥ev
;

10 
Node
 *
	m√xt
;

13 
	sLi°
 {

14 
Node
 *
	mhód
 = 0;

15 
Node
 *
	mèû
 = 0;

16 
Node
 *
	mcuºít
 = 0;

18 
¥ötLi°
();

20 
Node
* 
begö
();

21 
Node
* 
íd
();

23 
ö£π
(
d©a
);

24 
ö£πEnd
(
d©a
);

25 
ªmove
(* 
d©a
);

26 
ªmoveEnd
(* 
d©a
);

	@MyHashMap.hpp

1 #i‚de‡
__MYHASHMAP_H


2 
	#__MYHASHMAP_H


	)

4 
	~<io°ªam
>

5 
	~"Utû.h
"

7 
	gãm∂©e
<
ty≥«me
 
	gK
,Åy≥«mê
	gV
>

8 ˛as†
	cMyHashNode
 {

9 
	mpublic
:

10 
	$MyHashNode
(c⁄° 
K
& 
key
, c⁄° 
V
& 
vÆue
)

11 : 
	`key
(
key
), 
	`vÆue
(
vÆue
), 
	$√xt
(
nuŒ±r
) {}

13 c⁄° 
K
& 
	$gëKey
(Ëc⁄° {  
key
; 
	}
}

14 c⁄° 
	gV
& 
	$gëVÆue
(Ëc⁄° {  
vÆue
; 
	}
}

15 
	$£tVÆue
(
V
 
vÆue
Ë{ 
this
->vÆuêvÆue; 
	}
}

16 
MyHashNode
* 
	$gëNext
(Ëc⁄° {  
√xt
; 
	}
}

17 
	$£tNext
(
MyHashNode
* 
√xt
Ë{ 
this
->√xà√xt; 
	}
}

19 
	g¥iv©e
:

20 c⁄° 
K
 
key
;

21 
V
 
	gvÆue
;

22 
MyHashNode
* 
	g√xt
;

25 
	gãm∂©e
 <
ty≥«me
 
	gK
>

26 
	sMyKeyHash
 {

27 
›î©‹
(Ë(c⁄° 
	mK
& 
	mkey
) const {

28  
	mªöãΩªt_ˇ°
<>(
	mkey
);

32 
	gãm∂©e
<
ty≥«me
 
	gK
,Åy≥«mê
	gV
>

33 
	sMyE¡ryVõwî
 {

34 
›î©‹
()(
FILE
* 
	mÂ
, 
	mMyHashNode
<
	mK
,
	mV
>& 
	mo
) {

35 
Ârötf
(
Â
, "{E¡ry:%p, Key:%p, VÆue;%p}", &
o
, &o.
gëKey
(), &o.
gëVÆue
());

39 
	gãm∂©e
<
ty≥«me
 
	gK
,Åy≥«mê
	gV
,Åy≥«mê
	gMyE¡ryVõwî
 = 
MyE¡ryVõwî
<
K
,V>,Åy≥«mê
	gMyKeyHashFunc
 = 
MyKeyHash
<K>, 
size_t
 
	gTABLE_SIZE
 = 1000>

40 ˛as†
	cMyHashM≠
 {

41 
public
:

42 
	$MyHashM≠
() {

43 
èbÀ
 = 
√w
 
MyHashNode
<
K
,
V
>*[
TABLE_SIZE
];

44 
	`mem£t
(
èbÀ
, 0, (
MyHashNode
<
K
,
V
>*)*
TABLE_SIZE
);

45 
size
 = 0;

46 
ˇ∑côy
 = 
TABLE_SIZE
;

49 ~
	$MyHashM≠
() {

50 
	`˛ór
();

51 
dñëe
[] 
èbÀ
;

52 
èbÀ
 = 
nuŒ±r
;

53 
ˇ∑côy
 = 0;

54 
	}
}

56 
	$˛ór
() {

57 if(
size
<1) ;

58 
i
 = 0; i < 
ˇ∑côy
; ++i) {

59 
MyHashNode
<
K
,
V
>* 
íåy
 = 
èbÀ
[
i
];

60 if(!
íåy
) ;

61 
íåy
) {

62 
MyHashNode
<
K
,
V
>* 
¥ev
 = 
íåy
;

63 
íåy
 =É¡ry->
	`gëNext
();

64 
dñëe
 
¥ev
;

66 
èbÀ
[
i
] = 
nuŒ±r
;

68 
size
 = 0;

69 
	}
}

72 
boﬁ
 
	$gë
(c⁄° 
K
& 
key
, 
V
& 
vÆue
) {

73 if(
size
<1Ë 
Ál£
;

74 
hashVÆue
 = 
	`hashFunc
(
key
);

75 
MyHashNode
<
K
,
V
>* 
íåy
 = 
èbÀ
[
hashVÆue
%
TABLE_SIZE
];

76 
íåy
) {

77 if(
íåy
->
	`gëKey
(Ë=
key
) {

78 
vÆue
 = 
íåy
->
	`gëVÆue
();

79  
åue
;

81 
íåy
 =É¡ry->
	`gëNext
();

83  
Ál£
;

84 
	}
}

86 
	$put
(c⁄° 
K
& 
key
, c⁄° 
V
& 
vÆue
) {

87 
hashVÆue
 = 
	`hashFunc
(
key
);

88 
MyHashNode
<
K
,
V
>* 
¥ev
 = 
nuŒ±r
;

89 
MyHashNode
<
K
,
V
>* 
íåy
 = 
èbÀ
[
hashVÆue
%
TABLE_SIZE
];

91 
íåy
 &&É¡ry->
	`gëKey
(Ë!
key
) {

92 
¥ev
 = 
íåy
;

93 
íåy
íåy->
	`gëNext
();

96 if(!
íåy
) {

97 
íåy
 = 
√w
 
MyHashNode
<
K
,
V
>(
key
, 
vÆue
);

98 if(
nuŒ±r
 =
¥ev
) {

99 
èbÀ
[
hashVÆue
%
TABLE_SIZE
] = 
íåy
;

102 
¥ev
->
	`£tNext
(
íåy
);

105 
size
++;

108 
íåy
->
	`£tVÆue
(
vÆue
);

110 
	}
}

112 
	$ªmove
(c⁄° 
K
& 
key
) {

113 
hashVÆue
 = 
	`hashFunc
(
key
);

114 
MyHashNode
<
K
,
V
>* 
¥ev
 = 
nuŒ±r
;

115 
MyHashNode
<
K
,
V
>* 
íåy
 = 
èbÀ
[
hashVÆue
%
TABLE_SIZE
];

117 
íåy
 &&É¡ry->
	`gëKey
(Ë!
key
) {

118 
¥ev
 = 
íåy
;

119 
íåy
 =É¡ry->
	`gëNext
();

122 if(!
íåy
) {

127 if(
nuŒ±r
 =
¥ev
) {

128 
èbÀ
[
hashVÆue
%
TABLE_SIZE
] = 
íåy
->
	`gëNext
();

131 
¥ev
->
	`£tNext
(
íåy
->
	`gëNext
());

134 
size
--;

135 
	}
}

137 
	$¥öt
(
FILE
* 
Â
) {

138 
˙t
 = 0;

139 
	`Ârötf
(
Â
, "{");

140 
	`Ârötf
(
Â
, "\n\tsize=%d\n\t, c≠acôy=%d", 
size
, 
ˇ∑côy
);

141 
	`Ârötf
(
Â
, "\n\t,Éntry=[");

142 
i
 = 0; i < 
TABLE_SIZE
; ++i) {

143 
MyHashNode
<
K
,
V
>* 
íåy
 = 
èbÀ
[
i
];

145 if(!
íåy
) ;

147 
	`Ârötf
(
Â
,

149 (
˙t
>0?", ":""),

150 
i
);

152 
íåy
) {

153 
	`võwî
(
Â
, *
íåy
);

154 if(
íåy
->
	`gëNext
()Ë
	`Ârötf
(
Â
, ", ");

155 
íåy
 =É¡ry->
	`gëNext
();

157 
	`Ârötf
(
Â
, "]");

159 
˙t
++;

162 i‡(
˙t
>0Ë
	`Ârötf
(
Â
, "\n\t\t]"); fprintf(fp, "]");

163 
	`Ârötf
(
Â
, "\n}\n");

164 
	}
}

166 
	g¥iv©e
:

167 
MyHashNode
<
K
,
	gV
>** 
	gèbÀ
;

168 
MyE¡ryVõwî
 
	gvõwî
;

169 
MyKeyHashFunc
 
	ghashFunc
;

170 
size_t
 
	gsize
;

171 
size_t
 
	gˇ∑côy
;

174 
	sMyCh¨sKeyHash
 {

175 
›î©‹
()(c⁄° * 
	m°r
) const {

176 
	mh
 = 5731;

177 * 
	mp
 = (*)
°r
;

178 *
	mp
) {

179 
	mh
 = (
h
<<5&h);

180 
	mh
*=*
p
;

181 
	mp
++;

183  
	mh
;

	@Util.h

1 #¥agm®
⁄˚


3 
	~<°dio.h
>

4 
	~<°döt.h
>

5 
	~<mÆloc.h
>

7 #ifde‡
__˝lu•lus


11 
uöt32_t
 
hash
(* 
buf
, 
size_t
 
Àn
, uint32_t* hash);

12 
hash_void
(c⁄° *
key
);

13 
¥ime_max
(
n
);

15 * 
mem£t
(* 
p
, 
c
, 
size_t
 
Àn
);

17 
size_t
 
°æí
(c⁄° * 
p
);

18 * 
°∫˝y
(* 
p
, c⁄° * 
s
, 
size_t
 
s_Àn
);

19 
°rhash
(c⁄° * 
°r
, 
mod
);

20 
°∫cmp
(c⁄° * 
a
, c⁄° * 
b
, 
size_t
 
Àn
);

21 
°rcmp
(c⁄° * 
a
, c⁄° * 
b
);

22 * 
°r°r
(c⁄° * 
°r1
, c⁄° * 
°r2
);

25 #ifde‡
__˝lu•lus


	@a1.hpp

1 #¥agm®
⁄˚


3 
	~<°rög
>

4 
	~<io°ªam
>

14 
	m«me
[512];

15 
	mdesc
[512];

16 
	m£Œ˙t
;

17 
	mno
;

18 }
	tBook
;

20 
f1
(
a
, 
b
);

	@array.hpp

1 
	~<io°ªam
>

3 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gN
>

4 ˛as†
	cAºay
 {

5 
T
 
	md©a
[
N
];

7 
	mpublic
:

8 
Aºay
(
T
 (&
¨r
)[
N
]) {

9 
i
 = 0;
	mi
<
	mN
;++i) {

10 
	md©a
[
i
] = 
¨r
[i];

14 
T
* 
	$gëAºay
(Ë{  
d©a
; 
	}
}

16 
	$size
(Ë{  
N
; 
	}
}

18 
	$¥öt
() {

19 
i
 = 0;ò< 
N
;++i) {

20 
°d
::
cout
 << 
d©a
[
i
] << ", ";

22 
°d
::
cout
 << std::
ídl
;

23 
	}
}

	@common.h

3 #¥agm®
⁄˚


5 
	~<°dio.h
>

7 
	~<c⁄io.h
>

9 
	~<mÆloc.h
>

10 
	~<mem‹y.h
>

11 
	~<time.h
>

13 #¥agm®
w¨nög
(
dißbÀ
:4996)

	@hash_map.hpp

1 #¥agm®
⁄˚


3 
	~<io°ªam
>

4 
	~"Utû.h
"

6 
	#HASH_MAP_USE_KEYSET
 0

	)

8 
	gãm∂©e
<
ty≥«me
 
	gKey
,Åy≥«mê
	gVÆue
>

9 
	sKeyVÆueVõwî
 {

10 
›î©‹
()(c⁄° 
	mKey
& 
	mkey
, c⁄° 
	mVÆue
& 
	mvÆue
) const {

11 
¥ötf
("(%s, %s)", 
key
, 
vÆue
);

15 
	gãm∂©e
<
ty≥«me
 
	gKey
>

16 
	sKeyM©chî
 {

17 
›î©‹
()(c⁄° 
	mKey
& 
	ma
, c⁄° Key& 
	mb
) const {

18  
	mªöãΩªt_ˇ°
<>(
	ma
Ë-ÑeöãΩªt_ˇ°<>(
	mb
);

21 
	gãm∂©e
<
ty≥«me
 
	gK
>

22 
	sKeyHash
 {

23 
›î©‹
(Ë(c⁄° 
	mK
& 
	mkey
) const {

24  
	mªöãΩªt_ˇ°
<>(
	mkey
);

28 
	gãm∂©e
 <
ty≥«me
 
	gKey
,Åy≥«mê
	gVÆue
>

29 ˛as†
	cHashNode
 {

30 
	mpublic
:

31 
	$HashNode
(
Key
 
key
, 
VÆue
 
vÆue
Ë: 
	`key
(key), 
	`vÆue
(vÆueË, 
	$√xt
(
nuŒ±r
) {}

32 
Key
 
	$gëKey
(Ëc⁄° {  
key
; 
	}
}

33 
VÆue
 
	$gëVÆue
(Ëc⁄°{  
vÆue
; 
	}
}

34 
HashNode
* 
	$gëNext
(Ëc⁄° {  
√xt
; 
	}
}

35 
	$£tVÆue
(
VÆue
 
vÆue
Ë{ 
HashNode
::vÆuêvÆue; 
	}
}

36 
	$£tNext
(
HashNode
* 
√xt
Ë{ HashNode::√xà√xt; 
	}
}

38 
	g¥iv©e
:

39 
Key
 
key
;

40 
VÆue
 
	gvÆue
;

41 
HashNode
* 
	g√xt
;

44 
	gãm∂©e
 <
ty≥«me
 
	gKey
,

45 
ty≥«me
 
	gVÆue
,

46 
ty≥«me
 
	gKeyVÆueVõwî
 = 
KeyVÆueVõwî
<
Key
,
	gVÆue
>,

47 
ty≥«me
 
	gHash
 = 
KeyHash
<
Key
>,

48 
ty≥«me
 
	gKeyM©chî
 = 
KeyM©chî
<
Key
>,

49 
size_t
 
	gTabÀSize
 = 1000000>

50 ˛as†
	cHashM≠
 {

51 
public
:

52 
	$HashM≠
() {

53 
èbÀ
 = 
√w
 
HashNode
<
Key
,
VÆue
>* [
TabÀSize
];

54 
	`mem£t
(
èbÀ
, 0, (
HashNode
<
Key
, 
VÆue
>*)*
TabÀSize
);

55 
size
 = 0;

56 #i‡
HASH_MAP_USE_KEYSET


57 
keySë
 = 
nuŒ±r
;

61 ~
	$HashM≠
() {

63 
i
 = 0; i < 
TabÀSize
; ++i) {

64 
HashNode
<
Key
,
VÆue
> *
íåy
 = 
èbÀ
[
i
];

66 #i‡
HASH_MAP_USE_KEYSET


67 
HashNode
<
Key
,> *
keyIãm
 = 
keySë
; keyIãm;keyIãm=keyIãm->
	`gëNext
()) {

68 
HashNode
<
Key
,> *
keyIãmPªv
 = 
keyIãm
;

69 
HashNode
<
Key
,
VÆue
> *
íåy
 = 
èbÀ
[
keyIãm
->
	`gëVÆue
()];

72 
íåy
 !
NULL
) {

73 
HashNode
<
Key
,
VÆue
> *
¥e
 = 
íåy
;

74 
íåy
 =É¡ry->
	`gëNext
();

75 
dñëe
 
¥e
;

78 
èbÀ
[
i
] = 
nuŒ±r
;

80 #i‡
HASH_MAP_USE_KEYSET


81 
èbÀ
[
keyIãm
->
	`gëVÆue
()] = 
nuŒ±r
;

82 
dñëe
 
keyIãmPªv
;

85 
dñëe
[] 
èbÀ
;

86 
èbÀ
 = 
nuŒ±r
;

87 #i‡
HASH_MAP_USE_KEYSET


88 
keySë
 = 
nuŒ±r
;

90 
	}
}

92 
	$gëSize
(Ëc⁄° {  
size
; 
	}
}

94 
boﬁ
 
	$gë
(c⁄° 
Key
 &
key
, 
VÆue
 &
vÆue
) {

95 
hashVÆue
 = 
	`hashFunc
(
key
Ë% 
TabÀSize
;

96 
HashNode
<
Key
, 
VÆue
>* 
íåy
 = 
èbÀ
[
hashVÆue
];

98 
íåy
 !
nuŒ±r
) {

99 if(!
	`keyM©chî
(
íåy
->
	`gëKey
(), 
key
)) {

100 
vÆue
 = 
íåy
->
	`gëVÆue
();

101  
åue
;

103 
íåy
 =É¡ry->
	`gëNext
();

105  
Ál£
;

106 
	}
}

108 
	$put
(c⁄° 
Key
& 
key
, c⁄° 
VÆue
& 
vÆue
) {

109 
hashVÆue
 = 
	`hashFunc
(
key
Ë% 
TabÀSize
;

110 
HashNode
<
Key
, 
VÆue
> *
¥ev
 = 
nuŒ±r
;

111 
HashNode
<
Key
, 
VÆue
> *
íåy
 = 
èbÀ
[
hashVÆue
];

113 
íåy
 !
nuŒ±r
 && !
	`keyM©chî
”¡ry->
	`gëKey
(), 
key
)) {

114 
¥ev
 = 
íåy
;

115 
íåy
 =É¡ry->
	`gëNext
();

118 if(
íåy
==
nuŒ±r
){

119 
íåy
 = 
√w
 
HashNode
<
Key
, 
VÆue
>(
key
, 
vÆue
);

120 if(
¥ev
==
nuŒ±r
) {

121 
èbÀ
[
hashVÆue
] = 
íåy
;

123 
¥ev
->
	`£tNext
(
íåy
);

127 
íåy
->
	`£tVÆue
(
vÆue
);

129 
size
++;

132 #i‡
HASH_MAP_USE_KEYSET


133 
HashNode
<
Key
,>* 
√wKey
 = 
√w
 HashNode<Key, >(
key
, 
hashVÆue
);

134 if(
keySë
) {

135 
√wKey
->
	`£tNext
(
keySë
);

136 
keySë
 = 
√wKey
;

139 
keySë
 = 
√wKey
;

140 
keySë
->
	`£tNext
(
nuŒ±r
);

143 
	}
}

145 
	$ªmove
(c⁄° 
Key
& 
key
) {

146 
hashVÆue
 = 
	`hashFunc
(
key
Ë% 
TabÀSize
;

147 
HashNode
<
Key
, 
VÆue
> *
¥ev
 = 
nuŒ±r
;

148 
HashNode
<
Key
, 
VÆue
> *
íåy
 = 
èbÀ
[
hashVÆue
];

150 
íåy
 !
nuŒ±r
&&É¡ry->
	`gëKey
(Ë!
key
) {

151 
¥ev
 = 
íåy
;

152 
íåy
 =É¡ry->
	`gëNext
();

155 if(
íåy
==
nuŒ±r
) {

159 if(
¥ev
==
nuŒ±r
) {

160 
èbÀ
[
hashVÆue
] = 
íåy
->
	`gëNext
();

163 
¥ev
->
	`£tNext
(
íåy
->
	`gëNext
());

165 
dñëe
 
íåy
;

167 
size
--;

168 
	}
}

170 
	$¥öt
() {

172 
HashNode
<
Key
, 
VÆue
>* 
íåy
 = 
nuŒ±r
;

174 
	`¥ötf
("size=%Œd,ÅabÀSize=%Œd\n", 
size
, 
TabÀSize
);

175 
i
 = 0;i<
TabÀSize
;i++) {

177 
íåy
 = 
èbÀ
[
i
];

179 if(!
íåy
) ;

181 
	`¥ötf
("[%d] : ", 
i
);

183 
íåy
) {

184 
	`keyVÆueVõwî
(
íåy
->
	`gëKey
(),É¡ry->
	`gëVÆue
());

185 
íåy
 =É¡ry->
	`gëNext
();

186 if(
íåy
Ë
	`¥ötf
(", ");

188 
	`¥ötf
("\n");

190 
	}
}

192 
	$˛óøŒ
() {

193 
i
 = 0; i < 
TabÀSize
; ++i) {

194 
HashNode
<
Key
,
VÆue
> *
íåy
 = 
èbÀ
[
i
];

195 
íåy
 !
NULL
) {

196 
HashNode
<
Key
,
VÆue
> *
¥e
 = 
íåy
;

197 
íåy
 =É¡ry->
	`gëNext
();

198 
dñëe
 
¥e
;

200 
èbÀ
[
i
] = 
nuŒ±r
;

202 
size
 = 0;

203 
	}
}

205 
	g¥iv©e
:

206 
HashNode
<
Key
, 
	gVÆue
>** 
	gèbÀ
;

207 
size_t
 
	gsize
;

208 #i‡
HASH_MAP_USE_KEYSET


209 
	gHashNode
<
	gKey
, >* 
	gkeySë
;

211 
Hash
 
	ghashFunc
;

212 
KeyM©chî
 
	gkeyM©chî
;

213 
KeyVÆueVõwî
 
	gkeyVÆueVõwî
;

	@mzhelper.h

1 
	~<°dlib.h
>

3 
	~<zmq.h
>

5 * 
	$zmq_ªcv_buf
(* 
sockë
, * 
buf
, 
size_t
 
buf_size
) {

6 
size
 = 
	`zmq_ªcv
(
sockë
, 
buf
, 
buf_size
, 0);

7 if(
size
 < 0Ë 
NULL
;

8 if(
size
>
buf_size
-1) size = buf_size-1;

9 
buf
[
size
] = 0;

10  
buf
;

11 
	}
}

	@
1
.
1
/usr/include
49
985
D:\Dev\abc\Book.h
D:\Dev\abc\List.cpp
D:\Dev\abc\List.h
D:\Dev\abc\MurmurHash2.cpp
D:\Dev\abc\MyData.h
D:\Dev\abc\MyHashMap.hpp
D:\Dev\abc\ThreadPool.cpp
D:\Dev\abc\Util.cpp
D:\Dev\abc\Util.h
D:\Dev\abc\a.c
D:\Dev\abc\a.cpp
D:\Dev\abc\a1.cpp
D:\Dev\abc\a1.hpp
D:\Dev\abc\a2.cpp
D:\Dev\abc\a3.cpp
D:\Dev\abc\a4.cpp
D:\Dev\abc\a_hash.cpp
D:\Dev\abc\aa.cpp
D:\Dev\abc\aaa.cpp
D:\Dev\abc\ab.cpp
D:\Dev\abc\array.hpp
D:\Dev\abc\at.cpp
D:\Dev\abc\b.c
D:\Dev\abc\book.c
D:\Dev\abc\build\CMakeFiles\3.19.3\CompilerIdCXX\CMakeCXXCompilerId.cpp
D:\Dev\abc\build\CMakeFiles\3.19.3\CompilerIdC\CMakeCCompilerId.c
D:\Dev\abc\c20.cpp
D:\Dev\abc\common.h
D:\Dev\abc\hash.hpp
D:\Dev\abc\hash_map.hpp
D:\Dev\abc\hello_g.cpp
D:\Dev\abc\inc\List.h
D:\Dev\abc\inc\aaa.h
D:\Dev\abc\list.hpp
D:\Dev\abc\mhashmap.cpp
D:\Dev\abc\mzhelper.h
D:\Dev\abc\test_qsort.cpp
D:\Dev\abc\z.cpp
D:\Dev\abc\zcli.cpp
D:\Dev\abc\zecho.cpp
Book.h
List.h
MyHashMap.hpp
Util.h
a1.hpp
array.hpp
common.h
hash_map.hpp
mzhelper.h
